[{"/Users/jayden/Documents/GitHub/ubereats-frontend/src/index.tsx":"1","/Users/jayden/Documents/GitHub/ubereats-frontend/src/apollo.ts":"2","/Users/jayden/Documents/GitHub/ubereats-frontend/src/reportWebVitals.ts":"3","/Users/jayden/Documents/GitHub/ubereats-frontend/src/routers/logged-out-router.tsx":"4","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/create-account.tsx":"5","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/login.tsx":"6","/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/form-error.tsx":"7","/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/button.tsx":"8","/Users/jayden/Documents/GitHub/ubereats-frontend/src/constants.ts":"9","/Users/jayden/Documents/GitHub/ubereats-frontend/src/routers/logged-in-router.tsx":"10","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/404.tsx":"11","/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/header.tsx":"12","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/client/restaurants.tsx":"13","/Users/jayden/Documents/GitHub/ubereats-frontend/src/hooks/useMe.tsx":"14","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/user/confirm-email.tsx":"15","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/user/edit-profile.tsx":"16","/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/app.tsx":"17","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/client/restaurant.tsx":"18","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/client/category.tsx":"19","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/client/search.tsx":"20","/Users/jayden/Documents/GitHub/ubereats-frontend/src/fragments.ts":"21","/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/restaurant.tsx":"22","/Users/jayden/Documents/GitHub/ubereats-frontend/src/__generated__/globalTypes.ts":"23","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/owner/my-restaurants.tsx":"24","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/owner/add-restaurants.tsx":"25"},{"size":773,"mtime":1609291673094,"results":"26","hashOfConfig":"27"},{"size":977,"mtime":1609134644242,"results":"28","hashOfConfig":"27"},{"size":425,"mtime":1608821013862,"results":"29","hashOfConfig":"27"},{"size":666,"mtime":1609138638070,"results":"30","hashOfConfig":"27"},{"size":5024,"mtime":1609397421390,"results":"31","hashOfConfig":"27"},{"size":4550,"mtime":1609392719257,"results":"32","hashOfConfig":"27"},{"size":247,"mtime":1609316097629,"results":"33","hashOfConfig":"27"},{"size":483,"mtime":1609319045135,"results":"34","hashOfConfig":"27"},{"size":47,"mtime":1609132429855,"results":"35","hashOfConfig":"27"},{"size":2576,"mtime":1609480496815,"results":"36","hashOfConfig":"27"},{"size":638,"mtime":1609232811000,"results":"37","hashOfConfig":"27"},{"size":1194,"mtime":1609204804559,"results":"38","hashOfConfig":"27"},{"size":5218,"mtime":1609243603000,"results":"39","hashOfConfig":"27"},{"size":326,"mtime":1609313140928,"results":"40","hashOfConfig":"27"},{"size":1995,"mtime":1609205277169,"results":"41","hashOfConfig":"27"},{"size":3220,"mtime":1609205311662,"results":"42","hashOfConfig":"27"},{"size":391,"mtime":1609291609411,"results":"43","hashOfConfig":"27"},{"size":1878,"mtime":1609247756440,"results":"44","hashOfConfig":"27"},{"size":1085,"mtime":1609243299668,"results":"45","hashOfConfig":"27"},{"size":1548,"mtime":1609235743959,"results":"46","hashOfConfig":"27"},{"size":422,"mtime":1609242610544,"results":"47","hashOfConfig":"27"},{"size":746,"mtime":1609246254508,"results":"48","hashOfConfig":"27"},{"size":1262,"mtime":1609481976660,"results":"49","hashOfConfig":"27"},{"size":1406,"mtime":1609480610732,"results":"50","hashOfConfig":"27"},{"size":2300,"mtime":1609477209177,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"18f0r1h",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"54"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"54"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"54"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"54"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"54"},"/Users/jayden/Documents/GitHub/ubereats-frontend/src/index.tsx",[],["114","115"],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/apollo.ts",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/reportWebVitals.ts",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/routers/logged-out-router.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/create-account.tsx",["116","117"],"import { gql, useMutation } from \"@apollo/client\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { FormError } from \"../components/form-error\";\nimport uberLogo from '../images/eats-logo.svg';\nimport { Button } from \"../components/button\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet-async\";\nimport { UserRole } from \"../__generated__/globalTypes\";\nimport { createAccountMutation, createAccountMutationVariables } from \"../__generated__/createAccountMutation\";\n\nexport const CREATE_ACCOUNT_MUTATION = gql`\nmutation createAccountMutation($createAccountInput: CreateAccountInput!) {\n    createAccount(input: $createAccountInput) {\n      ok\n      error\n    }\n  }\n`;\ninterface ICreateAccountForm {\n    email: string;\n    password: string;\n    role: UserRole;\n  }\n  \n  export const CreateAccount = () => {\n    const { register, \n            getValues,\n            errors, \n            handleSubmit, \n            formState \n        } = useForm<ICreateAccountForm>({\n        mode: 'onChange',\n        defaultValues: {\n            role: UserRole.Client,\n        },\n    });\n    const history = useHistory();\n    const onCompleted = (data: createAccountMutation) => {\n        const {\n            createAccount: { ok }\n        } = data;\n        if(ok){\n            alert(\"Account created! Log in Now!\");\n            history.push('/');\n        }\n    };\n    const [\n        createAccountMutation,\n        {loading, data: createAccountMutationResult},\n        ] = useMutation<createAccountMutation, createAccountMutationVariables>(\n            CREATE_ACCOUNT_MUTATION,\n            {\n                onCompleted,\n            });\n    const onSubmit = () => {\n        if(!loading){\n            const { email, password, role } = getValues();\n            createAccountMutation({\n                variables: {\n                    createAccountInput: { email, password, role}\n                }\n            });\n        }\n    };\n    return (\n        <div className=\"h-screen flex items-center flex-col mt-10 lg:mt-28\">\n            <Helmet>\n                <title>Create Account | Uber Eats</title>\n            </Helmet>\n            <div className=\" w-full max-w-screen-sm flex flex-col px-5 items-center\">\n                <img src={uberLogo} className=\"w-52 mb-10\" alt=\"uberLogo\"/>\n                <h4 className=\"w-full font-medium text-left text-3xl mb-5\">\n                    Let's get started\n                </h4>\n                <form\n                onSubmit={handleSubmit(onSubmit)}\n                className=\"grid gap-3 mt-5 w-full mb-5\"\n                >\n                    <input\n                    ref={register({ \n                        required: \"Email is required\", \n                        pattern: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/ \n                    })}\n                    name=\"email\"\n                    required\n                    type=\"email\"\n                    placeholder=\"Email\"\n                    className=\"input\"\n                    />\n                    {errors.email?.message && (\n                        <FormError errorMessage={errors.email?.message} />\n                    )}\n                    {errors.email?.type === 'pattern' && (\n                        <FormError errorMessage={'Please enter a valid email'} />\n                    )}\n                    <input\n                    ref={register({ required: \"Password is required\" })}\n                    required\n                    name=\"password\"\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    className=\"input\"\n                    />\n                    {errors.password?.message && (\n                        <FormError errorMessage={errors.password?.message} />\n                    )}\n                    <select\n                        name='role'\n                        ref={register({required: true})}\n                        className=\"input\"\n                    >\n                        {Object.keys(UserRole).map((role, index) => (\n                            <option key={index}>{role}</option>\n                        ))}\n                    </select>\n                    <Button \n                        canClick={formState.isValid}\n                        loading={loading}\n                        actionText={\"Create Account\"}\n                    />\n                    {createAccountMutationResult?.createAccount.error && (\n                        <FormError\n                            errorMessage={createAccountMutationResult.createAccount.error} />\n                    )}\n                </form>\n                <div>\n                    Already have an account?{\" \"}\n                    <Link to=\"/\" className=\" text-lime-600 hover:underline\">\n                        Login now\n                    </Link>\n                </div>\n            </div>\n        </div>\n        );\n    };","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/login.tsx",["118","119"],"import { gql, useMutation } from \"@apollo/client\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { FormError } from \"../components/form-error\";\nimport {\n  loginMutation,\n  loginMutationVariables,\n} from \"../__generated__/loginMutation\";\nimport uberLogo from '../images/eats-logo.svg';\nimport { Button } from \"../components/button\";\nimport { Link } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet-async\";\nimport { authTokenVar, isLoggedInVar } from \"../apollo\";\nimport { LOCALSTORAGE_TOKEN } from \"../constants\";\n\nexport const LOGIN_MUTATION = gql`\nmutation loginMutation($loginInput: LoginInput!) {\n    login(input: $loginInput) {\n      ok\n      token\n      error\n    }\n  }\n`;\ninterface ILoginForm {\n    email: string;\n    password: string;\n}\n  \nexport const Login = () => {\n    const { register, getValues, errors, handleSubmit, formState } = useForm<ILoginForm>({\n        mode: 'onChange'\n    });\n    const onCompleted = (data: loginMutation) => {\n        const {\n            login: { ok, token },\n        } = data;\n        if (ok && token) {\n            localStorage.setItem(LOCALSTORAGE_TOKEN, token);\n            authTokenVar(token);\n            isLoggedInVar(true);\n        }\n    };\n    const [loginMutation, { data: loginMutationResult, loading }] = useMutation<\n        loginMutation,\n        loginMutationVariables\n    >(LOGIN_MUTATION, {\n        onCompleted,\n    });\n    const onSubmit = () => {\n    if(!loading){    \n        const { email, password } = getValues();\n        loginMutation({\n            variables: {\n                loginInput: {\n                    email,\n                    password,\n                    },\n                },\n            });\n        }\n    };\n    return (\n        <div className=\"h-screen flex items-center flex-col mt-10 lg:mt-28\">\n            <Helmet>\n                <title>Login | Uber Eats</title>\n            </Helmet>\n            <div className=\" w-full max-w-screen-sm flex flex-col px-5 items-center\">\n                <img src={uberLogo} className=\"w-52 mb-10\" alt=\"uberLogo\"/>\n                <h4 className=\"w-full font-medium text-left text-3xl mb-5\">\n                    Welcome Back\n                </h4>\n                <h3 className=\"text-2xl text-gray-800\">Log In</h3>\n                <form\n                onSubmit={handleSubmit(onSubmit)}\n                className=\"grid gap-3 mt-5 w-full mb-5\"\n                >\n                    <input\n                    ref={register({ \n                        required: \"Email is required\", \n                        pattern: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                    })}\n                    name=\"email\"\n                    required\n                    type=\"email\"\n                    placeholder=\"Email\"\n                    className=\"input\"\n                    />\n                    {errors.email?.message && (\n                    <FormError errorMessage={errors.email?.message} />\n                    )}\n                    {errors.email?.type === \"pattern\" && (\n                        <FormError errorMessage={'Please enter a valid email'} />\n                    )}\n                    <input\n                    ref={register({ required: \"Password is required\" })}\n                    required\n                    name=\"password\"\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    className=\"input\"\n                    />\n                    {errors.password?.message && (\n                    <FormError errorMessage={errors.password?.message} />\n                    )}\n                    {errors.password?.type === \"minLength\" && (\n                    <FormError errorMessage=\"Password must be more than 10 chars.\" />\n                    )}\n                    <Button \n                        canClick={formState.isValid}\n                        loading={loading}\n                        actionText={\"Log in\"}\n                    />\n                    {loginMutationResult?.login.error && (\n                    <FormError errorMessage={loginMutationResult.login.error} />\n                    )}\n                </form>\n                <div>\n                    New to Uber?{\" \"}\n                    <Link to=\"/create-account\" className=\" text-lime-600 hover:underline\">\n                        Create an Account\n                    </Link>\n                </div>\n            </div>\n        </div>\n        );\n};","/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/form-error.tsx",[],["120","121"],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/button.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/constants.ts",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/routers/logged-in-router.tsx",["122"],"import React from \"react\";\nimport { BrowserRouter as Router, Redirect, Route, Switch } from \"react-router-dom\";\nimport { Header } from \"../components/header\";\nimport { useMe } from \"../hooks/useMe\";\nimport { NotFound } from \"../pages/404\";\nimport { Category } from \"../pages/client/category\";\nimport { Restaurant } from \"../pages/client/restaurant\";\nimport { Restaurants } from \"../pages/client/restaurants\";\nimport { Search } from \"../pages/client/search\";\nimport { AddRestaurant } from \"../pages/owner/add-restaurants\";\nimport { MyRestaurants } from \"../pages/owner/my-restaurants\";\nimport { ConfirmEmail } from \"../pages/user/confirm-email\";\nimport { EditProfile } from \"../pages/user/edit-profile\";\n\nconst clientRoutes = [\n    {\n        path: \"/\",\n        component: <Restaurants />\n    },\n    {\n        path: \"/search\",\n        component: <Search />\n    },\n    {\n        path: \"/category/:slug\",\n        component: <Category />\n    },\n    {\n        path: \"/restaurants/:id\",\n        component: <Restaurant />\n    }\n];\n\nconst commonRoutes = [\n    {\n        path: \"/confirm\",\n        component: <ConfirmEmail />\n    },\n    {\n        path: \"/edit-profile\",\n        component: <EditProfile />\n    }\n]\n\nconst restaurantRoutes = [\n    { \n        path: \"/\", \n        component: <MyRestaurants />\n    },\n    {\n        path: \"/add-restaurant\", \n        component: <AddRestaurant />\n    }\n];\n\nexport const LoggedInRouter = () => {\n    const {data, loading, error} = useMe();\n    if(loading || !data || error){\n        return (\n            <div className=\" h-screen flex justify-center items-center\">\n                <span className=\"font-medium text-xl tracking-wide\">Loading...</span>\n            </div>\n        );\n    }\n    return (\n    <Router>\n        <Header />\n        <Switch>\n            {data.me.role === 'Client' && \n                clientRoutes.map((route) => (\n                    <Route exact key={route.path} path={route.path}>\n                        {route.component}\n                    </Route>\n                ))}\n            {data.me.role === \"Owner\" &&\n                restaurantRoutes.map((route) => (\n                    <Route exact key={route.path} path={route.path}>\n                        {route.component}\n                    </Route>\n                ))}\n            {commonRoutes.map((route) => (\n                <Route key={route.path} path={route.path}>\n                    {route.component}\n                </Route>\n                ))}\n            <Route>\n                <NotFound />\n            </Route>\n        </Switch>\n    </Router>\n    );\n};\n","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/404.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/header.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/client/restaurants.tsx",["123"],"import { gql, useQuery } from '@apollo/client';\nimport { url } from \"inspector\";\nimport React, { useState } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useForm } from 'react-hook-form';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Restaurant } from '../../components/restaurant';\nimport { CATEGORY_FRAGMENT, RESTAURANT_FRAGMENT } from '../../fragments';\nimport { restaurantsPageQuery, restaurantsPageQueryVariables } from '../../__generated__/restaurantsPageQuery';\n\nconst RESTAURANTS_QUERY = gql`\n    query restaurantsPageQuery($input: RestaurantsInput!){\n        allCategories {\n            ok\n            error\n            categories {\n                ...CategoryParts\n            }\n        }\n        restaurants(input: $input) {\n            ok\n            error\n            totalPages\n            totalResults\n            results {\n                ...RestaurantParts\n            }\n        }\n    }\n    ${RESTAURANT_FRAGMENT}\n    ${CATEGORY_FRAGMENT}\n`;\n\ninterface IFormProps {\n    searchTerm: string;\n}\n\nexport const Restaurants = () => {\n    const [page, setPage] = useState(1);\n    const { data, loading } = useQuery<\n        restaurantsPageQuery,\n        restaurantsPageQueryVariables\n    >(RESTAURANTS_QUERY, {\n        variables: {\n            input: {\n                page\n            },\n        },\n    });\n    const onNextPageClick = () => setPage((current) => current + 1);\n    const onPrevPageClick = () => setPage((current) => current -1);\n    const { register, handleSubmit, getValues} = useForm<IFormProps>();\n    const history = useHistory();\n    const onSearchSubmit = () => {\n        const { searchTerm } = getValues();\n        history.push({\n            pathname: \"/search\",\n            search: `?term=${searchTerm}`,\n        });\n    };\n    return (\n        <div>\n            <Helmet>\n                <title>\n                    Home | Uber Eats\n                </title>\n            </Helmet>\n            <form \n                className=\"bg-gray-800 w-full py-40 flex items-center justify-center\"\n                onSubmit={handleSubmit(onSearchSubmit)}\n            >\n                <input \n                    ref={register({required: true, min: 3})}\n                    name=\"searchTerm\"\n                    type=\"Search\"\n                    className=\"input rounded-md border-0  w-3/4 md:w-3/12\"\n                    placeholder=\"Search Restaurants...\"    \n                />\n            </form>\n            {!loading && (\n                <div className=\" max-w-screen-2xl mx-auto mt-8 pb-20\">\n                    <div className=\"flex justify-around max-w-sm mx-auto\">\n                        {data?.allCategories.categories?.map((category) =>(\n                            <Link key={category.id} to={`/category/${category.slug}`}>\n                                <div key={category.id} className=\"flex flex-col  group items-center cursor-pointer\">\n                                    <div\n                                        className=\"w-16 h-16 bg-cover group-hover:bg-gray-400 rounded-full\"\n                                        style={{ backgroundImage: `url(${category.coverImg})` }}\n                                    ></div>\n                                    <span className=\"mt-1 text-sm text-center font-medium\">\n                                        {category.name}\n                                    </span>\n                                </div>\n                            </Link>\n                        ))}\n                    </div>\n                    <div className=\"grid mt-16 md:grid-cols-3 gap-x-5 gap-y-10\">\n                        {data?.restaurants.results?.map((restaurant)=> (\n                            <Restaurant\n                                id={restaurant.id + \"\"}\n                                coverImg={restaurant.coverImg}\n                                name={restaurant.name}\n                                categoryName={restaurant.category?.name}\n                            />\n                        ))}\n                    </div>\n                    <div className=\"grid grid-cols-3 text-center max-w-md items-center mx-auto mt-10\">\n                        {page > 1 ? (\n                        <button\n                            onClick={onPrevPageClick}\n                            className=\"focus:outline-none font-medium text-2xl\"\n                        >\n                            &larr;\n                            </button>\n                        ) : (\n                        <div></div>\n                        )}\n                        <span>\n                            Page {page} of {data?.restaurants.totalPages}\n                        </span>\n                        {page !== data?.restaurants.totalPages ? (\n                            <button\n                                onClick={onNextPageClick}\n                                className=\"focus:outline-none font-medium text-2xl\"\n                            >\n                                &rarr;\n                            </button>\n                        ) : (\n                            <div></div>\n                        )}\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};","/Users/jayden/Documents/GitHub/ubereats-frontend/src/hooks/useMe.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/user/confirm-email.tsx",["124"],"import { gql, useApolloClient, useMutation } from \"@apollo/client\"\nimport { useEffect } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useHistory } from \"react-router-dom\";\nimport { useMe } from \"../../hooks/useMe\";\nimport { verifyEmail, verifyEmailVariables } from \"../../__generated__/verifyEmail\";\n\nconst VERYFY_EMAIL_MUTATION = gql`\n    mutation verifyEmail($input: VerifyEmailInput!) {\n        verifyEmail(input: $input){\n            ok\n            error\n        }\n    }    \n`;\n\nexport const ConfirmEmail = () => {\n    const { data: userData} = useMe();\n    const client = useApolloClient();\n    const history = useHistory();\n    const onCompleted = (data: verifyEmail) => {\n        const {\n            verifyEmail: {ok},\n        } = data;\n        if(ok && userData?.me.id){\n            client.writeFragment({\n                id:`User:${userData.me.id}`,\n                fragment: gql`\n                    fragment VerifiedUser on User {\n                        verified\n                    }\n                `,\n                data: {\n                    verified: true,\n                },\n            });\n            history.push(\"/\");\n        }\n    };\n    const [verifyEmail] = useMutation<\n        verifyEmail,\n        verifyEmailVariables\n        >(VERYFY_EMAIL_MUTATION, {\n            onCompleted,\n        });\n    useEffect(()=> {\n        const [_, code] = window.location.href.split('code=');\n        verifyEmail({\n            variables: {\n                input: {\n                    code,\n                },\n            },\n        });\n    }, [verifyEmail]);\n    return (\n        <div className=\"mt-52 flex flex-col items-center justify-center\">\n            <Helmet>\n                <title>Verify Email | Uber Eats</title>\n            </Helmet>\n            <h2 className=\"text-lg mb-1 font-medium\">Confirming email</h2>\n            <h4 className=\"text-gray-700 text-sm\">\n                Please wait, don't close this page...\n            </h4>\n        </div>\n    );\n};","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/user/edit-profile.tsx",["125","126"],"import { gql, useApolloClient, useMutation } from '@apollo/client';\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useForm } from 'react-hook-form';\nimport { Button } from '../../components/button';\nimport { useMe } from '../../hooks/useMe';\nimport { editProfile, editProfileVariables } from '../../__generated__/editProfile';\n\nconst EDIT_PROFILE_MUTATION = gql`\n    mutation editProfile($input: EditProfileInput!){\n        editProfile(input: $input) {\n            ok\n            error\n        }\n    }\n`;\n\ninterface IFormProps {\n    email?: string;\n    password?: string;\n};\n\n\nexport const EditProfile = () => {\n    const { data: userData } = useMe();\n    const client = useApolloClient();\n    const onCompleted = (data: editProfile) => {\n        const {\n            editProfile: {ok},\n        } = data;\n        if(ok && userData){\n            const {\n                me: {email: prevEmail, id}\n            }= userData;\n            const { email: newEmail} = getValues();\n            if (prevEmail !== newEmail) {\n                client.writeFragment({\n                    id: `User:${id}`,\n                    fragment: gql`\n                        fragment EditedUser on User {\n                            verified\n                            email\n                        }\n                    `,\n                    data: {\n                        email: newEmail,\n                        verified: false\n                    },\n                });\n            }\n        }\n    };\n    const [editProfile, {loading}] = useMutation<\n        editProfile,\n        editProfileVariables\n        >(EDIT_PROFILE_MUTATION, {\n            onCompleted,\n        });\n    const { register, handleSubmit, getValues, formState} = useForm<IFormProps>({\n        mode: \"onChange\",\n        defaultValues: {\n            email: userData?.me.email,\n        },\n    });\n    const onSubmit = () => {\n        const { email, password } = getValues();\n        editProfile({\n            variables: {\n                input: {\n                    email,\n                    ...(password !== \"\" && { password }),\n                },\n            },\n        });\n    };\n    return (\n        <div className=\"mt-52 flex  flex-col justify-center items-center\">\n            <Helmet>\n                <title>\n                    Edit Profile | Uber Eats\n                </title>\n            </Helmet>\n            <h4 className=\"font-semibold text-2xl mb-3\">Edit Profile</h4>\n            <form onSubmit={handleSubmit(onSubmit)} className=\"grid max-w-screen-sm gap-3 mt-5 w-full mb-5\">\n                <input ref={register({\n                    pattern: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                })}\n                name=\"email\" \n                className=\"input\" \n                type=\"email\" \n                placeholder=\"Email\" \n                />\n                <input ref={register} className=\"input\" name=\"password\" type=\"password\" placeholder=\"Password\" />\n                <Button loading={loading} canClick={formState.isValid} actionText=\"Save Profile\" />\n            </form>\n        </div>\n    );\n};","/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/app.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/client/restaurant.tsx",["127"],"import { gql, useQuery } from '@apollo/client';\nimport React from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { useParams } from 'react-router-dom';\nimport { RESTAURANT_FRAGMENT } from '../../fragments';\nimport {\n    restaurant,\n    restaurantVariables,\n  } from \"../../__generated__/restaurant\";\n  \n\nconst RESTAURANT_QUERY = gql`\n    query restaurant($input: RestaurantInput!) {\n        restaurant(input: $input) {\n            ok\n            error\n            restaurant {\n                ...RestaurantParts\n            }\n        }\n    }\n    ${RESTAURANT_FRAGMENT}\n`;\n\ninterface IRestaurantParams {\n    id: string;\n}\n\nexport const Restaurant = () => {\n    const params = useParams<IRestaurantParams>();\n    const { loading, data } = useQuery<restaurant, restaurantVariables>(\n        RESTAURANT_QUERY,\n        {\n            variables: {\n                input: {\n                    restaurantId: +params.id\n                },\n            },\n        }\n    );\n    return (\n        <div>\n            <Helmet>\n                <title>{data?.restaurant.restaurant?.name || \"\"} | Uber Eats</title>\n            </Helmet>\n            <div\n                className=\" bg-gray-800 bg-center bg-cover py-48\"\n                style={{\n                    backgroundImage: `url(${data?.restaurant.restaurant?.coverImg})`,\n                }}\n            >\n                <div className=\"bg-white w-3/12 py-8 pl-48\">\n                    <h4 className=\"text-4xl mb-3 \">{data?.restaurant.restaurant?.name}</h4>\n                    <h5 className=\"text-sm font-light mb-2\">\n                        {data?.restaurant.restaurant?.category?.name}\n                    </h5>\n                    <h6 className=\"text-sm font-light\">\n                        {data?.restaurant.restaurant?.address}\n                    </h6>\n                </div>\n            </div>\n        </div>\n    )\n};","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/client/category.tsx",["128"],"import { gql, useQuery } from \"@apollo/client\"\nimport { useParams } from \"react-router-dom\";\nimport { CATEGORY_FRAGMENT, RESTAURANT_FRAGMENT } from \"../../fragments\"\nimport { category, categoryVariables } from \"../../__generated__/category\";\n\n\nconst CATEGORY_QUERY = gql`\n    query category($input: CategoryInput!) {\n        category(input: $input) {\n            ok\n            error\n            totalPages\n            totalResults\n            restaurants {\n                ...RestaurantParts\n            }\n            category {\n                ...CategoryParts\n            }\n        }\n    }\n    ${RESTAURANT_FRAGMENT}\n    ${CATEGORY_FRAGMENT}\n`;\n\ninterface ICategoryParams {\n    slug: string;\n}\n\nexport const Category = () => {\n    const params = useParams<ICategoryParams>();\n    const { data, loading } = useQuery<category, categoryVariables>(\n        CATEGORY_QUERY,\n        {\n          variables: {\n            input: {\n              page: 1,\n              slug: params.slug,\n            },\n          },\n        }\n      );\n      console.log(data);\n    return <h1>Category</h1>;\n}","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/client/search.tsx",["129","130"],"import { gql, useLazyQuery } from \"@apollo/client\";\nimport { useEffect } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { RESTAURANT_FRAGMENT } from \"../../fragments\";\nimport { searchRestaurant, searchRestaurantVariables } from \"../../__generated__/searchRestaurant\";\n\n\nconst SEARCH_RESTAURANT = gql`\n    query searchRestaurant($input: SearchRestaurantInput!) {\n        searchRestaurant(input: $input) {\n            ok\n            error\n            totalPages\n            totalResults\n            restaurants {\n                ...RestaurantParts\n            }\n        }\n    }\n    ${RESTAURANT_FRAGMENT}\n`;\n\nexport const Search = () => {\n    const location = useLocation();\n    const history = useHistory();\n    const [callQuery, { loading, data, called }] = useLazyQuery<\n        searchRestaurant,\n        searchRestaurantVariables\n    >(SEARCH_RESTAURANT);\n    useEffect(() => {\n        const [_, query ] = location.search.split(\"?term=\");\n        if(!query){\n            return history.replace(\"/\");\n        }\n        callQuery({\n            variables: {\n                input: {\n                    page: 1,\n                    query,\n                },\n            },\n        });\n    }, [history, location]);\n    console.log(loading, data, called);\n    return (\n        <div>\n            <Helmet>\n                <title>\n                    Search | Uber Eats\n                </title>\n            </Helmet>\n            <h1>Search Page</h1>\n        </div>\n    );\n};\n","/Users/jayden/Documents/GitHub/ubereats-frontend/src/fragments.ts",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/restaurant.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/__generated__/globalTypes.ts",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/owner/my-restaurants.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/owner/add-restaurants.tsx",["131","132","133"],"import { gql, useMutation } from \"@apollo/client\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useForm } from \"react-hook-form\";\nimport { Button } from \"../../components/button\";\nimport { createRestaurant, createRestaurantVariables } from \"../../__generated__/createRestaurant\";\n\n\nconst CREATE_RESTAURANT_MUTATION = gql`\n    mutation createRestaurant($input: CreateRestaurantInput!){\n        createRestaurant(input: $input) {\n            error\n            ok\n        }\n    }\n`;\n\ninterface IFormProps {\n    name: string;\n    address: string;\n    categoryName: string;\n}\n\nexport const AddRestaurant = () => {\n    const [createRestaurantMutation, { loading, data }] = useMutation<\n        createRestaurant,\n        createRestaurantVariables\n        >(CREATE_RESTAURANT_MUTATION);\n    const {\n        register,\n        getValues,\n        formState,\n        errors,\n        handleSubmit,\n    } = useForm<IFormProps>({\n        mode: \"onChange\"\n    });\n    const onSubmit = () => {\n        console.log(getValues());\n    };\n    return (\n        <div className=\"container\">\n            <Helmet>\n                <title>Add Restaurant | Uber Eats</title>\n            </Helmet>\n            <h1>Add Restaurant</h1>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <input \n                    className=\"input\"\n                    type = \"text\"\n                    name=\"name\"\n                    placeholder=\"Name\"\n                    ref={register({required: \"Name is required\"})}    \n                />\n                <input \n                    className=\"input\"\n                    type = \"text\"\n                    name = \"address\"\n                    placeholder= \"Address\"\n                    ref={register({required: \"Address is required\"})}\n                />\n                <input \n                    className=\"input\"\n                    type = \"text\"\n                    name = \"categoryName\"\n                    placeholder = \"Category Name\"\n                    ref = {register({required: \"Category Name is required\"})}\n                />\n                <Button \n                    loading={loading}\n                    canClick={formState.isValid}\n                    actionText = \"Create Restaurant\"\n                />\n            </form>\n        </div>\n    );\n};",{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","severity":1,"message":"139","line":83,"column":44,"nodeType":"140","messageId":"141","endLine":83,"endColumn":45,"suggestions":"142"},{"ruleId":"138","severity":1,"message":"139","line":83,"column":69,"nodeType":"140","messageId":"141","endLine":83,"endColumn":70,"suggestions":"143"},{"ruleId":"138","severity":1,"message":"139","line":81,"column":44,"nodeType":"140","messageId":"141","endLine":81,"endColumn":45,"suggestions":"144"},{"ruleId":"138","severity":1,"message":"139","line":81,"column":69,"nodeType":"140","messageId":"141","endLine":81,"endColumn":70,"suggestions":"145"},{"ruleId":"134","replacedBy":"146"},{"ruleId":"136","replacedBy":"147"},{"ruleId":"148","severity":1,"message":"149","line":2,"column":35,"nodeType":"150","messageId":"151","endLine":2,"endColumn":43},{"ruleId":"148","severity":1,"message":"152","line":2,"column":10,"nodeType":"150","messageId":"151","endLine":2,"endColumn":13},{"ruleId":"148","severity":1,"message":"153","line":47,"column":16,"nodeType":"150","messageId":"151","endLine":47,"endColumn":17},{"ruleId":"138","severity":1,"message":"139","line":86,"column":40,"nodeType":"140","messageId":"141","endLine":86,"endColumn":41,"suggestions":"154"},{"ruleId":"138","severity":1,"message":"139","line":86,"column":65,"nodeType":"140","messageId":"141","endLine":86,"endColumn":66,"suggestions":"155"},{"ruleId":"148","severity":1,"message":"156","line":31,"column":13,"nodeType":"150","messageId":"151","endLine":31,"endColumn":20},{"ruleId":"148","severity":1,"message":"156","line":32,"column":19,"nodeType":"150","messageId":"151","endLine":32,"endColumn":26},{"ruleId":"148","severity":1,"message":"153","line":32,"column":16,"nodeType":"150","messageId":"151","endLine":32,"endColumn":17},{"ruleId":"157","severity":1,"message":"158","line":44,"column":8,"nodeType":"159","endLine":44,"endColumn":27,"suggestions":"160"},{"ruleId":"148","severity":1,"message":"161","line":24,"column":12,"nodeType":"150","messageId":"151","endLine":24,"endColumn":36},{"ruleId":"148","severity":1,"message":"162","line":24,"column":49,"nodeType":"150","messageId":"151","endLine":24,"endColumn":53},{"ruleId":"148","severity":1,"message":"163","line":32,"column":9,"nodeType":"150","messageId":"151","endLine":32,"endColumn":15},"no-native-reassign",["164"],"no-negated-in-lhs",["165"],"no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["166","167"],["168","169"],["170","171"],["172","173"],["164"],["165"],"@typescript-eslint/no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'url' is defined but never used.","'_' is assigned a value but never used.",["174","175"],["176","177"],"'loading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'callQuery'. Either include it or remove the dependency array.","ArrayExpression",["178"],"'createRestaurantMutation' is assigned a value but never used.","'data' is assigned a value but never used.","'errors' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"messageId":"179","fix":"180","desc":"181"},{"messageId":"182","fix":"183","desc":"184"},{"messageId":"179","fix":"185","desc":"181"},{"messageId":"182","fix":"186","desc":"184"},{"messageId":"179","fix":"187","desc":"181"},{"messageId":"182","fix":"188","desc":"184"},{"messageId":"179","fix":"189","desc":"181"},{"messageId":"182","fix":"190","desc":"184"},{"messageId":"179","fix":"191","desc":"181"},{"messageId":"182","fix":"192","desc":"184"},{"messageId":"179","fix":"193","desc":"181"},{"messageId":"182","fix":"194","desc":"184"},{"desc":"195","fix":"196"},"removeEscape",{"range":"197","text":"198"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"199","text":"200"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"201","text":"198"},{"range":"202","text":"200"},{"range":"203","text":"198"},{"range":"204","text":"200"},{"range":"205","text":"198"},{"range":"206","text":"200"},{"range":"207","text":"198"},{"range":"208","text":"200"},{"range":"209","text":"198"},{"range":"210","text":"200"},"Update the dependencies array to be: [callQuery, history, location]",{"range":"211","text":"212"},[2779,2780],"",[2779,2779],"\\",[2804,2805],[2804,2804],[2584,2585],[2584,2584],[2609,2610],[2609,2609],[2648,2649],[2648,2648],[2673,2674],[2673,2673],[1270,1289],"[callQuery, history, location]"]