[{"/Users/jayden/Documents/GitHub/ubereats-frontend/src/index.tsx":"1","/Users/jayden/Documents/GitHub/ubereats-frontend/src/apollo.ts":"2","/Users/jayden/Documents/GitHub/ubereats-frontend/src/reportWebVitals.ts":"3","/Users/jayden/Documents/GitHub/ubereats-frontend/src/App.tsx":"4","/Users/jayden/Documents/GitHub/ubereats-frontend/src/routers/logged-out-router.tsx":"5","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/create-account.tsx":"6","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/login.tsx":"7","/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/form-error.tsx":"8","/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/button.tsx":"9","/Users/jayden/Documents/GitHub/ubereats-frontend/src/__generated__/globalTypes.ts":"10","/Users/jayden/Documents/GitHub/ubereats-frontend/src/constants.ts":"11","/Users/jayden/Documents/GitHub/ubereats-frontend/src/routers/logged-in-router.tsx":"12"},{"size":758,"mtime":1609133110120,"results":"13","hashOfConfig":"14"},{"size":977,"mtime":1609134644242,"results":"15","hashOfConfig":"14"},{"size":425,"mtime":1608821013862,"results":"16","hashOfConfig":"14"},{"size":399,"mtime":1609132409897,"results":"17","hashOfConfig":"14"},{"size":537,"mtime":1608890674201,"results":"18","hashOfConfig":"14"},{"size":5141,"mtime":1609132978023,"results":"19","hashOfConfig":"14"},{"size":4526,"mtime":1609132968051,"results":"20","hashOfConfig":"14"},{"size":234,"mtime":1609029786996,"results":"21","hashOfConfig":"14"},{"size":483,"mtime":1609056342606,"results":"22","hashOfConfig":"14"},{"size":706,"mtime":1609134525598,"results":"23","hashOfConfig":"14"},{"size":47,"mtime":1609132429855,"results":"24","hashOfConfig":"14"},{"size":795,"mtime":1609134440683,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"18f0r1h",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jayden/Documents/GitHub/ubereats-frontend/src/index.tsx",[],["53","54"],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/apollo.ts",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/reportWebVitals.ts",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/App.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/routers/logged-out-router.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/create-account.tsx",["55","56"],"import { gql, useMutation } from \"@apollo/client\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { FormError } from \"../components/form-error\";\nimport uberLogo from '../images/eats-logo.svg';\nimport { Button } from \"../components/button\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet-async\";\nimport { UserRole } from \"../__generated__/globalTypes\";\nimport { createAccountMutation, createAccountMutationVariables } from \"../__generated__/createAccountMutation\";\n\nconst CREATE_ACCOUNT_MUTATION = gql`\nmutation createAccountMutation($createAccountInput: CreateAccountInput!) {\n    createAccount(input: $createAccountInput) {\n      ok\n      error\n    }\n  }\n`;\ninterface ICreateAccountForm {\n    email: string;\n    password: string;\n    role: UserRole;\n  }\n  \n  export const CreateAccount = () => {\n    const { register, \n            getValues,\n            errors, \n            handleSubmit, \n            formState \n        } = useForm<ICreateAccountForm>({\n        mode: 'onChange',\n        defaultValues: {\n            role: UserRole.Client,\n        },\n    });\n    const history = useHistory();\n    const onCompleted = (data: createAccountMutation) => {\n        const {\n            createAccount: { ok }\n        } = data;\n        if(ok){\n            history.push('/login');\n        }\n    };\n    const [\n        createAccountMutation,\n        {loading, data: createAccountMutationResult},\n        ] = useMutation<createAccountMutation, createAccountMutationVariables>(\n            CREATE_ACCOUNT_MUTATION,\n            {\n                onCompleted,\n            });\n    const onSubmit = () => {\n        if(!loading){\n            const { email, password, role } = getValues();\n            createAccountMutation({\n                variables: {\n                    createAccountInput: { email, password, role}\n                }\n            });\n        }\n    };\n    return (\n        <div className=\"h-screen flex items-center flex-col mt-10 lg:mt-28\">\n            <Helmet>\n                <title>Create Account | Uber Eats</title>\n            </Helmet>\n            <div className=\" w-full max-w-screen-sm flex flex-col px-5 items-center\">\n                <img src={uberLogo} className=\"w-52 mb-10\" alt=\"uberLogo\"/>\n                <h4 className=\"w-full font-medium text-left text-3xl mb-5\">\n                    Let's get started\n                </h4>\n                <form\n                onSubmit={handleSubmit(onSubmit)}\n                className=\"grid gap-3 mt-5 w-full mb-5\"\n                >\n                    <input\n                    ref={register({ \n                        required: \"Email is required\", \n                        pattern: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/ \n                    })}\n                    name=\"email\"\n                    required\n                    type=\"email\"\n                    placeholder=\"Email\"\n                    className=\"input\"\n                    />\n                    {errors.email?.message && (\n                    <FormError errorMessage={errors.email?.message} />\n                    )}\n                    {errors.email?.type === 'pattern' && (\n                        <FormError errorMessage={'Please enter a vaild email'} />\n                    )}\n                    <input\n                    ref={register({ required: \"Password is required\" })}\n                    required\n                    name=\"password\"\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    className=\"input\"\n                    />\n                    {errors.password?.message && (\n                    <FormError errorMessage={errors.password?.message} />\n                    )}\n                    {errors.password?.type === \"minLength\" && (\n                    <FormError errorMessage=\"Password must be more than 10 chars.\" />\n                    )}\n                    <select\n                        name='role'\n                        ref={register({required: true})}\n                        className=\"input\"\n                    >\n                        {Object.keys(UserRole).map((role, index) => (\n                            <option key={index}>{role}</option>\n                        ))}\n                    </select>\n                    <Button \n                        canClick={formState.isValid}\n                        loading={loading}\n                        actionText={\"Create Account\"}\n                    />\n                    {createAccountMutationResult?.createAccount.error && (\n                        <FormError\n                            errorMessage={createAccountMutationResult.createAccount.error} />\n                    )}\n                </form>\n                <div>\n                    Already have an account?{\" \"}\n                    <Link to=\"/login\" className=\" text-lime-600 hover:underline\">\n                        Login now\n                    </Link>\n                </div>\n            </div>\n        </div>\n        );\n    };","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/login.tsx",["57","58"],"import { gql, useMutation } from \"@apollo/client\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { FormError } from \"../components/form-error\";\nimport {\n  loginMutation,\n  loginMutationVariables,\n} from \"../__generated__/loginMutation\";\nimport uberLogo from '../images/eats-logo.svg';\nimport { Button } from \"../components/button\";\nimport { Link } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet-async\";\nimport { authTokenVar, isLoggedInVar } from \"../apollo\";\nimport { LOCALSTORAGE_TOKEN } from \"../constants\";\n\nconst LOGIN_MUTATION = gql`\nmutation loginMutation($loginInput: LoginInput!) {\n    login(input: $loginInput) {\n      ok\n      token\n      error\n    }\n  }\n`;\ninterface ILoginForm {\n    email: string;\n    password: string;\n    resultError?: string;\n  }\n  \n  export const Login = () => {\n    const { register, getValues, errors, handleSubmit, formState } = useForm<ILoginForm>({\n        mode: 'onChange'\n    });\n    const onCompleted = (data: loginMutation) => {\n        const {\n          login: { ok, token },\n        } = data;\n        if (ok && token) {\n          localStorage.setItem(LOCALSTORAGE_TOKEN, token);\n          authTokenVar(token);\n          isLoggedInVar(true);\n        }\n      };\n    const [loginMutation, { data: loginMutationResult, loading }] = useMutation<\n    loginMutation,\n    loginMutationVariables\n    >(LOGIN_MUTATION, {\n        onCompleted,\n        });\n    const onSubmit = () => {\n    if(!loading){    \n        const { email, password } = getValues();\n        loginMutation({\n        variables: {\n            loginInput: {\n                email,\n                password,\n            },\n            },\n        });}\n    };\n    return (\n        <div className=\"h-screen flex items-center flex-col mt-10 lg:mt-28\">\n            <Helmet>\n                <title>Login | Uber Eats</title>\n            </Helmet>\n            <div className=\" w-full max-w-screen-sm flex flex-col px-5 items-center\">\n                <img src={uberLogo} className=\"w-52 mb-10\" alt=\"uberLogo\"/>\n                <h4 className=\"w-full font-medium text-left text-3xl mb-5\">\n                    Welcome Back\n                </h4>\n                <h3 className=\"text-2xl text-gray-800\">Log In</h3>\n                <form\n                onSubmit={handleSubmit(onSubmit)}\n                className=\"grid gap-3 mt-5 w-full mb-5\"\n                >\n                    <input\n                    ref={register({ \n                        required: \"Email is required\", \n                        pattern: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                    })}\n                    name=\"email\"\n                    required\n                    type=\"email\"\n                    placeholder=\"Email\"\n                    className=\"input\"\n                    />\n                    {errors.email?.message && (\n                    <FormError errorMessage={errors.email?.message} />\n                    )}\n                    {errors.email?.type === \"pattern\" && (\n                        <FormError errorMessage={'Please enter a valid email'} />\n                    )}\n                    <input\n                    ref={register({ required: \"Password is required\" })}\n                    required\n                    name=\"password\"\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    className=\"input\"\n                    />\n                    {errors.password?.message && (\n                    <FormError errorMessage={errors.password?.message} />\n                    )}\n                    {errors.password?.type === \"minLength\" && (\n                    <FormError errorMessage=\"Password must be more than 10 chars.\" />\n                    )}\n                    <Button \n                        canClick={formState.isValid}\n                        loading={loading}\n                        actionText={\"Log in\"}\n                    />\n                    {loginMutationResult?.login.error && (\n                    <FormError errorMessage={loginMutationResult.login.error} />\n                    )}\n                </form>\n                <div>\n                    New to Uber?{\" \"}\n                    <Link to=\"/create-account\" className=\" text-lime-600 hover:underline\">\n                        Create an Account\n                    </Link>\n                </div>\n            </div>\n        </div>\n        );\n    };","/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/form-error.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/button.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/__generated__/globalTypes.ts",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/constants.ts",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/routers/logged-in-router.tsx",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":82,"column":44,"nodeType":"65","messageId":"66","endLine":82,"endColumn":45,"suggestions":"67"},{"ruleId":"63","severity":1,"message":"64","line":82,"column":69,"nodeType":"65","messageId":"66","endLine":82,"endColumn":70,"suggestions":"68"},{"ruleId":"63","severity":1,"message":"64","line":81,"column":44,"nodeType":"65","messageId":"66","endLine":81,"endColumn":45,"suggestions":"69"},{"ruleId":"63","severity":1,"message":"64","line":81,"column":69,"nodeType":"65","messageId":"66","endLine":81,"endColumn":70,"suggestions":"70"},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["73","74"],["75","76"],["77","78"],["79","80"],"no-global-assign","no-unsafe-negation",{"messageId":"81","fix":"82","desc":"83"},{"messageId":"84","fix":"85","desc":"86"},{"messageId":"81","fix":"87","desc":"83"},{"messageId":"84","fix":"88","desc":"86"},{"messageId":"81","fix":"89","desc":"83"},{"messageId":"84","fix":"90","desc":"86"},{"messageId":"81","fix":"91","desc":"83"},{"messageId":"84","fix":"92","desc":"86"},"removeEscape",{"range":"93","text":"94"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"95","text":"96"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"97","text":"94"},{"range":"98","text":"96"},{"range":"99","text":"94"},{"range":"100","text":"96"},{"range":"101","text":"94"},{"range":"102","text":"96"},[2726,2727],"",[2726,2726],"\\",[2751,2752],[2751,2751],[2556,2557],[2556,2556],[2581,2582],[2581,2581]]