[{"/Users/jayden/Documents/GitHub/ubereats-frontend/src/index.tsx":"1","/Users/jayden/Documents/GitHub/ubereats-frontend/src/apollo.ts":"2","/Users/jayden/Documents/GitHub/ubereats-frontend/src/reportWebVitals.ts":"3","/Users/jayden/Documents/GitHub/ubereats-frontend/src/App.tsx":"4","/Users/jayden/Documents/GitHub/ubereats-frontend/src/routers/logged-out-router.tsx":"5","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/create-account.tsx":"6","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/login.tsx":"7","/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/form-error.tsx":"8","/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/button.tsx":"9","/Users/jayden/Documents/GitHub/ubereats-frontend/src/__generated__/globalTypes.ts":"10","/Users/jayden/Documents/GitHub/ubereats-frontend/src/constants.ts":"11","/Users/jayden/Documents/GitHub/ubereats-frontend/src/routers/logged-in-router.tsx":"12","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/404.tsx":"13","/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/header.tsx":"14","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/client/restaurants.tsx":"15","/Users/jayden/Documents/GitHub/ubereats-frontend/src/hooks/useMe.tsx":"16","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/user/confirm-email.tsx":"17","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/user/edit-profile.tsx":"18"},{"size":758,"mtime":1609133110120,"results":"19","hashOfConfig":"20"},{"size":977,"mtime":1609134644242,"results":"21","hashOfConfig":"20"},{"size":425,"mtime":1608821013862,"results":"22","hashOfConfig":"20"},{"size":399,"mtime":1609132409897,"results":"23","hashOfConfig":"20"},{"size":666,"mtime":1609138638070,"results":"24","hashOfConfig":"20"},{"size":5131,"mtime":1609138528940,"results":"25","hashOfConfig":"20"},{"size":4526,"mtime":1609132968051,"results":"26","hashOfConfig":"20"},{"size":234,"mtime":1609029786996,"results":"27","hashOfConfig":"20"},{"size":483,"mtime":1609056342606,"results":"28","hashOfConfig":"20"},{"size":916,"mtime":1609220263884,"results":"29","hashOfConfig":"20"},{"size":47,"mtime":1609132429855,"results":"30","hashOfConfig":"20"},{"size":1164,"mtime":1609161490415,"results":"31","hashOfConfig":"20"},{"size":632,"mtime":1609204849649,"results":"32","hashOfConfig":"20"},{"size":1194,"mtime":1609204804559,"results":"33","hashOfConfig":"20"},{"size":2435,"mtime":1609220303885,"results":"34","hashOfConfig":"20"},{"size":319,"mtime":1609141555212,"results":"35","hashOfConfig":"20"},{"size":1995,"mtime":1609205277169,"results":"36","hashOfConfig":"20"},{"size":3220,"mtime":1609205311662,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"18f0r1h",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"40"},"/Users/jayden/Documents/GitHub/ubereats-frontend/src/index.tsx",[],["79","80"],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/apollo.ts",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/reportWebVitals.ts",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/App.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/routers/logged-out-router.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/create-account.tsx",["81","82"],"import { gql, useMutation } from \"@apollo/client\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { FormError } from \"../components/form-error\";\nimport uberLogo from '../images/eats-logo.svg';\nimport { Button } from \"../components/button\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet-async\";\nimport { UserRole } from \"../__generated__/globalTypes\";\nimport { createAccountMutation, createAccountMutationVariables } from \"../__generated__/createAccountMutation\";\n\nconst CREATE_ACCOUNT_MUTATION = gql`\nmutation createAccountMutation($createAccountInput: CreateAccountInput!) {\n    createAccount(input: $createAccountInput) {\n      ok\n      error\n    }\n  }\n`;\ninterface ICreateAccountForm {\n    email: string;\n    password: string;\n    role: UserRole;\n  }\n  \n  export const CreateAccount = () => {\n    const { register, \n            getValues,\n            errors, \n            handleSubmit, \n            formState \n        } = useForm<ICreateAccountForm>({\n        mode: 'onChange',\n        defaultValues: {\n            role: UserRole.Client,\n        },\n    });\n    const history = useHistory();\n    const onCompleted = (data: createAccountMutation) => {\n        const {\n            createAccount: { ok }\n        } = data;\n        if(ok){\n            history.push('/');\n        }\n    };\n    const [\n        createAccountMutation,\n        {loading, data: createAccountMutationResult},\n        ] = useMutation<createAccountMutation, createAccountMutationVariables>(\n            CREATE_ACCOUNT_MUTATION,\n            {\n                onCompleted,\n            });\n    const onSubmit = () => {\n        if(!loading){\n            const { email, password, role } = getValues();\n            createAccountMutation({\n                variables: {\n                    createAccountInput: { email, password, role}\n                }\n            });\n        }\n    };\n    return (\n        <div className=\"h-screen flex items-center flex-col mt-10 lg:mt-28\">\n            <Helmet>\n                <title>Create Account | Uber Eats</title>\n            </Helmet>\n            <div className=\" w-full max-w-screen-sm flex flex-col px-5 items-center\">\n                <img src={uberLogo} className=\"w-52 mb-10\" alt=\"uberLogo\"/>\n                <h4 className=\"w-full font-medium text-left text-3xl mb-5\">\n                    Let's get started\n                </h4>\n                <form\n                onSubmit={handleSubmit(onSubmit)}\n                className=\"grid gap-3 mt-5 w-full mb-5\"\n                >\n                    <input\n                    ref={register({ \n                        required: \"Email is required\", \n                        pattern: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/ \n                    })}\n                    name=\"email\"\n                    required\n                    type=\"email\"\n                    placeholder=\"Email\"\n                    className=\"input\"\n                    />\n                    {errors.email?.message && (\n                    <FormError errorMessage={errors.email?.message} />\n                    )}\n                    {errors.email?.type === 'pattern' && (\n                        <FormError errorMessage={'Please enter a vaild email'} />\n                    )}\n                    <input\n                    ref={register({ required: \"Password is required\" })}\n                    required\n                    name=\"password\"\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    className=\"input\"\n                    />\n                    {errors.password?.message && (\n                    <FormError errorMessage={errors.password?.message} />\n                    )}\n                    {errors.password?.type === \"minLength\" && (\n                    <FormError errorMessage=\"Password must be more than 10 chars.\" />\n                    )}\n                    <select\n                        name='role'\n                        ref={register({required: true})}\n                        className=\"input\"\n                    >\n                        {Object.keys(UserRole).map((role, index) => (\n                            <option key={index}>{role}</option>\n                        ))}\n                    </select>\n                    <Button \n                        canClick={formState.isValid}\n                        loading={loading}\n                        actionText={\"Create Account\"}\n                    />\n                    {createAccountMutationResult?.createAccount.error && (\n                        <FormError\n                            errorMessage={createAccountMutationResult.createAccount.error} />\n                    )}\n                </form>\n                <div>\n                    Already have an account?{\" \"}\n                    <Link to=\"/\" className=\" text-lime-600 hover:underline\">\n                        Login now\n                    </Link>\n                </div>\n            </div>\n        </div>\n        );\n    };","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/login.tsx",["83","84"],"import { gql, useMutation } from \"@apollo/client\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { FormError } from \"../components/form-error\";\nimport {\n  loginMutation,\n  loginMutationVariables,\n} from \"../__generated__/loginMutation\";\nimport uberLogo from '../images/eats-logo.svg';\nimport { Button } from \"../components/button\";\nimport { Link } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet-async\";\nimport { authTokenVar, isLoggedInVar } from \"../apollo\";\nimport { LOCALSTORAGE_TOKEN } from \"../constants\";\n\nconst LOGIN_MUTATION = gql`\nmutation loginMutation($loginInput: LoginInput!) {\n    login(input: $loginInput) {\n      ok\n      token\n      error\n    }\n  }\n`;\ninterface ILoginForm {\n    email: string;\n    password: string;\n    resultError?: string;\n  }\n  \n  export const Login = () => {\n    const { register, getValues, errors, handleSubmit, formState } = useForm<ILoginForm>({\n        mode: 'onChange'\n    });\n    const onCompleted = (data: loginMutation) => {\n        const {\n          login: { ok, token },\n        } = data;\n        if (ok && token) {\n          localStorage.setItem(LOCALSTORAGE_TOKEN, token);\n          authTokenVar(token);\n          isLoggedInVar(true);\n        }\n      };\n    const [loginMutation, { data: loginMutationResult, loading }] = useMutation<\n    loginMutation,\n    loginMutationVariables\n    >(LOGIN_MUTATION, {\n        onCompleted,\n        });\n    const onSubmit = () => {\n    if(!loading){    \n        const { email, password } = getValues();\n        loginMutation({\n        variables: {\n            loginInput: {\n                email,\n                password,\n            },\n            },\n        });}\n    };\n    return (\n        <div className=\"h-screen flex items-center flex-col mt-10 lg:mt-28\">\n            <Helmet>\n                <title>Login | Uber Eats</title>\n            </Helmet>\n            <div className=\" w-full max-w-screen-sm flex flex-col px-5 items-center\">\n                <img src={uberLogo} className=\"w-52 mb-10\" alt=\"uberLogo\"/>\n                <h4 className=\"w-full font-medium text-left text-3xl mb-5\">\n                    Welcome Back\n                </h4>\n                <h3 className=\"text-2xl text-gray-800\">Log In</h3>\n                <form\n                onSubmit={handleSubmit(onSubmit)}\n                className=\"grid gap-3 mt-5 w-full mb-5\"\n                >\n                    <input\n                    ref={register({ \n                        required: \"Email is required\", \n                        pattern: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                    })}\n                    name=\"email\"\n                    required\n                    type=\"email\"\n                    placeholder=\"Email\"\n                    className=\"input\"\n                    />\n                    {errors.email?.message && (\n                    <FormError errorMessage={errors.email?.message} />\n                    )}\n                    {errors.email?.type === \"pattern\" && (\n                        <FormError errorMessage={'Please enter a valid email'} />\n                    )}\n                    <input\n                    ref={register({ required: \"Password is required\" })}\n                    required\n                    name=\"password\"\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    className=\"input\"\n                    />\n                    {errors.password?.message && (\n                    <FormError errorMessage={errors.password?.message} />\n                    )}\n                    {errors.password?.type === \"minLength\" && (\n                    <FormError errorMessage=\"Password must be more than 10 chars.\" />\n                    )}\n                    <Button \n                        canClick={formState.isValid}\n                        loading={loading}\n                        actionText={\"Log in\"}\n                    />\n                    {loginMutationResult?.login.error && (\n                    <FormError errorMessage={loginMutationResult.login.error} />\n                    )}\n                </form>\n                <div>\n                    New to Uber?{\" \"}\n                    <Link to=\"/create-account\" className=\" text-lime-600 hover:underline\">\n                        Create an Account\n                    </Link>\n                </div>\n            </div>\n        </div>\n        );\n    };","/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/form-error.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/button.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/__generated__/globalTypes.ts",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/constants.ts",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/routers/logged-in-router.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/404.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/header.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/client/restaurants.tsx",["85"],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/hooks/useMe.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/user/confirm-email.tsx",["86"],"import { gql, useApolloClient, useMutation } from \"@apollo/client\"\nimport { useEffect } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useHistory } from \"react-router-dom\";\nimport { useMe } from \"../../hooks/useMe\";\nimport { verifyEmail, verifyEmailVariables } from \"../../__generated__/verifyEmail\";\n\nconst VERYFY_EMAIL_MUTATION = gql`\n    mutation verifyEmail($input: VerifyEmailInput!) {\n        verifyEmail(input: $input){\n            ok\n            error\n        }\n    }    \n`;\n\nexport const ConfirmEmail = () => {\n    const { data: userData} = useMe();\n    const client = useApolloClient();\n    const history = useHistory();\n    const onCompleted = (data: verifyEmail) => {\n        const {\n            verifyEmail: {ok},\n        } = data;\n        if(ok && userData?.me.id){\n            client.writeFragment({\n                id:`User:${userData.me.id}`,\n                fragment: gql`\n                    fragment VerifiedUser on User {\n                        verified\n                    }\n                `,\n                data: {\n                    verified: true,\n                },\n            });\n            history.push(\"/\");\n        }\n    };\n    const [verifyEmail] = useMutation<\n        verifyEmail,\n        verifyEmailVariables\n        >(VERYFY_EMAIL_MUTATION, {\n            onCompleted,\n        });\n    useEffect(()=> {\n        const [_, code] = window.location.href.split('code=');\n        verifyEmail({\n            variables: {\n                input: {\n                    code,\n                },\n            },\n        });\n    }, [verifyEmail]);\n    return (\n        <div className=\"mt-52 flex flex-col items-center justify-center\">\n            <Helmet>\n                <title>Verify Email | Uber Eats</title>\n            </Helmet>\n            <h2 className=\"text-lg mb-1 font-medium\">Confirming email</h2>\n            <h4 className=\"text-gray-700 text-sm\">\n                Please wait, don't close this page...\n            </h4>\n        </div>\n    );\n};","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/user/edit-profile.tsx",["87","88"],"import { gql, useApolloClient, useMutation } from '@apollo/client';\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useForm } from 'react-hook-form';\nimport { Button } from '../../components/button';\nimport { useMe } from '../../hooks/useMe';\nimport { editProfile, editProfileVariables } from '../../__generated__/editProfile';\n\nconst EDIT_PROFILE_MUTATION = gql`\n    mutation editProfile($input: EditProfileInput!){\n        editProfile(input: $input) {\n            ok\n            error\n        }\n    }\n`;\n\ninterface IFormProps {\n    email?: string;\n    password?: string;\n};\n\n\nexport const EditProfile = () => {\n    const { data: userData } = useMe();\n    const client = useApolloClient();\n    const onCompleted = (data: editProfile) => {\n        const {\n            editProfile: {ok},\n        } = data;\n        if(ok && userData){\n            const {\n                me: {email: prevEmail, id}\n            }= userData;\n            const { email: newEmail} = getValues();\n            if (prevEmail !== newEmail) {\n                client.writeFragment({\n                    id: `User:${id}`,\n                    fragment: gql`\n                        fragment EditedUser on User {\n                            verified\n                            email\n                        }\n                    `,\n                    data: {\n                        email: newEmail,\n                        verified: false\n                    },\n                });\n            }\n        }\n    };\n    const [editProfile, {loading}] = useMutation<\n        editProfile,\n        editProfileVariables\n        >(EDIT_PROFILE_MUTATION, {\n            onCompleted,\n        });\n    const { register, handleSubmit, getValues, formState} = useForm<IFormProps>({\n        mode: \"onChange\",\n        defaultValues: {\n            email: userData?.me.email,\n        },\n    });\n    const onSubmit = () => {\n        const { email, password } = getValues();\n        editProfile({\n            variables: {\n                input: {\n                    email,\n                    ...(password !== \"\" && { password }),\n                },\n            },\n        });\n    };\n    return (\n        <div className=\"mt-52 flex  flex-col justify-center items-center\">\n            <Helmet>\n                <title>\n                    Edit Profile | Uber Eats\n                </title>\n            </Helmet>\n            <h4 className=\"font-semibold text-2xl mb-3\">Edit Profile</h4>\n            <form onSubmit={handleSubmit(onSubmit)} className=\"grid max-w-screen-sm gap-3 mt-5 w-full mb-5\">\n                <input ref={register({\n                    pattern: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                })}\n                name=\"email\" \n                className=\"input\" \n                type=\"email\" \n                placeholder=\"Email\" \n                />\n                <input ref={register} className=\"input\" name=\"password\" type=\"password\" placeholder=\"Password\" />\n                <Button loading={loading} canClick={formState.isValid} actionText=\"Save Profile\" />\n            </form>\n        </div>\n    );\n};",{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":82,"column":44,"nodeType":"95","messageId":"96","endLine":82,"endColumn":45,"suggestions":"97"},{"ruleId":"93","severity":1,"message":"94","line":82,"column":69,"nodeType":"95","messageId":"96","endLine":82,"endColumn":70,"suggestions":"98"},{"ruleId":"93","severity":1,"message":"94","line":81,"column":44,"nodeType":"95","messageId":"96","endLine":81,"endColumn":45,"suggestions":"99"},{"ruleId":"93","severity":1,"message":"94","line":81,"column":69,"nodeType":"95","messageId":"96","endLine":81,"endColumn":70,"suggestions":"100"},{"ruleId":"101","severity":1,"message":"102","line":2,"column":10,"nodeType":"103","messageId":"104","endLine":2,"endColumn":13},{"ruleId":"101","severity":1,"message":"105","line":47,"column":16,"nodeType":"103","messageId":"104","endLine":47,"endColumn":17},{"ruleId":"93","severity":1,"message":"94","line":86,"column":40,"nodeType":"95","messageId":"96","endLine":86,"endColumn":41,"suggestions":"106"},{"ruleId":"93","severity":1,"message":"94","line":86,"column":65,"nodeType":"95","messageId":"96","endLine":86,"endColumn":66,"suggestions":"107"},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["110","111"],["112","113"],["114","115"],["116","117"],"@typescript-eslint/no-unused-vars","'url' is defined but never used.","Identifier","unusedVar","'_' is assigned a value but never used.",["118","119"],["120","121"],"no-global-assign","no-unsafe-negation",{"messageId":"122","fix":"123","desc":"124"},{"messageId":"125","fix":"126","desc":"127"},{"messageId":"122","fix":"128","desc":"124"},{"messageId":"125","fix":"129","desc":"127"},{"messageId":"122","fix":"130","desc":"124"},{"messageId":"125","fix":"131","desc":"127"},{"messageId":"122","fix":"132","desc":"124"},{"messageId":"125","fix":"133","desc":"127"},{"messageId":"122","fix":"134","desc":"124"},{"messageId":"125","fix":"135","desc":"127"},{"messageId":"122","fix":"136","desc":"124"},{"messageId":"125","fix":"137","desc":"127"},"removeEscape",{"range":"138","text":"139"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"140","text":"141"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"142","text":"139"},{"range":"143","text":"141"},{"range":"144","text":"139"},{"range":"145","text":"141"},{"range":"146","text":"139"},{"range":"147","text":"141"},{"range":"148","text":"139"},{"range":"149","text":"141"},{"range":"150","text":"139"},{"range":"151","text":"141"},[2721,2722],"",[2721,2721],"\\",[2746,2747],[2746,2746],[2556,2557],[2556,2556],[2581,2582],[2581,2581],[2648,2649],[2648,2648],[2673,2674],[2673,2673]]