[{"/Users/jayden/Documents/GitHub/ubereats-frontend/src/index.tsx":"1","/Users/jayden/Documents/GitHub/ubereats-frontend/src/apollo.ts":"2","/Users/jayden/Documents/GitHub/ubereats-frontend/src/reportWebVitals.ts":"3","/Users/jayden/Documents/GitHub/ubereats-frontend/src/routers/logged-out-router.tsx":"4","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/create-account.tsx":"5","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/login.tsx":"6","/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/form-error.tsx":"7","/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/button.tsx":"8","/Users/jayden/Documents/GitHub/ubereats-frontend/src/constants.ts":"9","/Users/jayden/Documents/GitHub/ubereats-frontend/src/routers/logged-in-router.tsx":"10","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/404.tsx":"11","/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/header.tsx":"12","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/client/restaurants.tsx":"13","/Users/jayden/Documents/GitHub/ubereats-frontend/src/hooks/useMe.tsx":"14","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/user/confirm-email.tsx":"15","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/user/edit-profile.tsx":"16","/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/app.tsx":"17","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/client/restaurant.tsx":"18","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/client/category.tsx":"19","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/client/search.tsx":"20","/Users/jayden/Documents/GitHub/ubereats-frontend/src/fragments.ts":"21","/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/restaurant.tsx":"22","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/owner/my-restaurants.tsx":"23","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/owner/add-restaurants.tsx":"24","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/owner/my-restaurant.tsx":"25","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/owner/add-dish.tsx":"26","/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/dish.tsx":"27","/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/dish-option.tsx":"28","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/order.tsx":"29","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/driver/dashboard.tsx":"30","/Users/jayden/Documents/GitHub/ubereats-frontend/src/__generated__/globalTypes.ts":"31"},{"size":773,"mtime":1609291673094,"results":"32","hashOfConfig":"33"},{"size":1731,"mtime":1609922836112,"results":"34","hashOfConfig":"33"},{"size":425,"mtime":1608821013862,"results":"35","hashOfConfig":"33"},{"size":666,"mtime":1609138638070,"results":"36","hashOfConfig":"33"},{"size":5024,"mtime":1609397421390,"results":"37","hashOfConfig":"33"},{"size":4550,"mtime":1609392719257,"results":"38","hashOfConfig":"33"},{"size":247,"mtime":1609316097629,"results":"39","hashOfConfig":"33"},{"size":491,"mtime":1609913485566,"results":"40","hashOfConfig":"33"},{"size":47,"mtime":1609132429855,"results":"41","hashOfConfig":"33"},{"size":3410,"mtime":1609819625394,"results":"42","hashOfConfig":"33"},{"size":638,"mtime":1609232811000,"results":"43","hashOfConfig":"33"},{"size":1194,"mtime":1609204804559,"results":"44","hashOfConfig":"33"},{"size":5242,"mtime":1609913855310,"results":"45","hashOfConfig":"33"},{"size":326,"mtime":1609313140928,"results":"46","hashOfConfig":"33"},{"size":1995,"mtime":1609205277169,"results":"47","hashOfConfig":"33"},{"size":3220,"mtime":1609205311662,"results":"48","hashOfConfig":"33"},{"size":391,"mtime":1609291609411,"results":"49","hashOfConfig":"33"},{"size":8032,"mtime":1609835957441,"results":"50","hashOfConfig":"33"},{"size":1085,"mtime":1609243299668,"results":"51","hashOfConfig":"33"},{"size":1548,"mtime":1609235743959,"results":"52","hashOfConfig":"33"},{"size":1032,"mtime":1609740544170,"results":"53","hashOfConfig":"33"},{"size":746,"mtime":1609246254508,"results":"54","hashOfConfig":"33"},{"size":2109,"mtime":1609552423079,"results":"55","hashOfConfig":"33"},{"size":5447,"mtime":1609552777504,"results":"56","hashOfConfig":"33"},{"size":5056,"mtime":1609748198703,"results":"57","hashOfConfig":"33"},{"size":5542,"mtime":1609589239567,"results":"58","hashOfConfig":"33"},{"size":2425,"mtime":1609650399549,"results":"59","hashOfConfig":"33"},{"size":973,"mtime":1609650339099,"results":"60","hashOfConfig":"33"},{"size":6152,"mtime":1609836387452,"results":"61","hashOfConfig":"33"},{"size":6089,"mtime":1609836324891,"results":"62","hashOfConfig":"33"},{"size":2381,"mtime":1611749744503,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"18f0r1h",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"66"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"66"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"66"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"66"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"66"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"66"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"66"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"66"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"66"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"66"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"66"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"66"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"66"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jayden/Documents/GitHub/ubereats-frontend/src/index.tsx",[],["141","142"],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/apollo.ts",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/reportWebVitals.ts",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/routers/logged-out-router.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/create-account.tsx",["143","144"],"import { gql, useMutation } from \"@apollo/client\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { FormError } from \"../components/form-error\";\nimport uberLogo from '../images/eats-logo.svg';\nimport { Button } from \"../components/button\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet-async\";\nimport { UserRole } from \"../__generated__/globalTypes\";\nimport { createAccountMutation, createAccountMutationVariables } from \"../__generated__/createAccountMutation\";\n\nexport const CREATE_ACCOUNT_MUTATION = gql`\nmutation createAccountMutation($createAccountInput: CreateAccountInput!) {\n    createAccount(input: $createAccountInput) {\n      ok\n      error\n    }\n  }\n`;\ninterface ICreateAccountForm {\n    email: string;\n    password: string;\n    role: UserRole;\n  }\n  \n  export const CreateAccount = () => {\n    const { register, \n            getValues,\n            errors, \n            handleSubmit, \n            formState \n        } = useForm<ICreateAccountForm>({\n        mode: 'onChange',\n        defaultValues: {\n            role: UserRole.Client,\n        },\n    });\n    const history = useHistory();\n    const onCompleted = (data: createAccountMutation) => {\n        const {\n            createAccount: { ok }\n        } = data;\n        if(ok){\n            alert(\"Account created! Log in Now!\");\n            history.push('/');\n        }\n    };\n    const [\n        createAccountMutation,\n        {loading, data: createAccountMutationResult},\n        ] = useMutation<createAccountMutation, createAccountMutationVariables>(\n            CREATE_ACCOUNT_MUTATION,\n            {\n                onCompleted,\n            });\n    const onSubmit = () => {\n        if(!loading){\n            const { email, password, role } = getValues();\n            createAccountMutation({\n                variables: {\n                    createAccountInput: { email, password, role}\n                }\n            });\n        }\n    };\n    return (\n        <div className=\"h-screen flex items-center flex-col mt-10 lg:mt-28\">\n            <Helmet>\n                <title>Create Account | Uber Eats</title>\n            </Helmet>\n            <div className=\" w-full max-w-screen-sm flex flex-col px-5 items-center\">\n                <img src={uberLogo} className=\"w-52 mb-10\" alt=\"uberLogo\"/>\n                <h4 className=\"w-full font-medium text-left text-3xl mb-5\">\n                    Let's get started\n                </h4>\n                <form\n                onSubmit={handleSubmit(onSubmit)}\n                className=\"grid gap-3 mt-5 w-full mb-5\"\n                >\n                    <input\n                    ref={register({ \n                        required: \"Email is required\", \n                        pattern: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/ \n                    })}\n                    name=\"email\"\n                    required\n                    type=\"email\"\n                    placeholder=\"Email\"\n                    className=\"input\"\n                    />\n                    {errors.email?.message && (\n                        <FormError errorMessage={errors.email?.message} />\n                    )}\n                    {errors.email?.type === 'pattern' && (\n                        <FormError errorMessage={'Please enter a valid email'} />\n                    )}\n                    <input\n                    ref={register({ required: \"Password is required\" })}\n                    required\n                    name=\"password\"\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    className=\"input\"\n                    />\n                    {errors.password?.message && (\n                        <FormError errorMessage={errors.password?.message} />\n                    )}\n                    <select\n                        name='role'\n                        ref={register({required: true})}\n                        className=\"input\"\n                    >\n                        {Object.keys(UserRole).map((role, index) => (\n                            <option key={index}>{role}</option>\n                        ))}\n                    </select>\n                    <Button \n                        canClick={formState.isValid}\n                        loading={loading}\n                        actionText={\"Create Account\"}\n                    />\n                    {createAccountMutationResult?.createAccount.error && (\n                        <FormError\n                            errorMessage={createAccountMutationResult.createAccount.error} />\n                    )}\n                </form>\n                <div>\n                    Already have an account?{\" \"}\n                    <Link to=\"/\" className=\" text-lime-600 hover:underline\">\n                        Login now\n                    </Link>\n                </div>\n            </div>\n        </div>\n        );\n    };","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/login.tsx",["145","146"],"import { gql, useMutation } from \"@apollo/client\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { FormError } from \"../components/form-error\";\nimport {\n  loginMutation,\n  loginMutationVariables,\n} from \"../__generated__/loginMutation\";\nimport uberLogo from '../images/eats-logo.svg';\nimport { Button } from \"../components/button\";\nimport { Link } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet-async\";\nimport { authTokenVar, isLoggedInVar } from \"../apollo\";\nimport { LOCALSTORAGE_TOKEN } from \"../constants\";\n\nexport const LOGIN_MUTATION = gql`\nmutation loginMutation($loginInput: LoginInput!) {\n    login(input: $loginInput) {\n      ok\n      token\n      error\n    }\n  }\n`;\ninterface ILoginForm {\n    email: string;\n    password: string;\n}\n  \nexport const Login = () => {\n    const { register, getValues, errors, handleSubmit, formState } = useForm<ILoginForm>({\n        mode: 'onChange'\n    });\n    const onCompleted = (data: loginMutation) => {\n        const {\n            login: { ok, token },\n        } = data;\n        if (ok && token) {\n            localStorage.setItem(LOCALSTORAGE_TOKEN, token);\n            authTokenVar(token);\n            isLoggedInVar(true);\n        }\n    };\n    const [loginMutation, { data: loginMutationResult, loading }] = useMutation<\n        loginMutation,\n        loginMutationVariables\n    >(LOGIN_MUTATION, {\n        onCompleted,\n    });\n    const onSubmit = () => {\n    if(!loading){    \n        const { email, password } = getValues();\n        loginMutation({\n            variables: {\n                loginInput: {\n                    email,\n                    password,\n                    },\n                },\n            });\n        }\n    };\n    return (\n        <div className=\"h-screen flex items-center flex-col mt-10 lg:mt-28\">\n            <Helmet>\n                <title>Login | Uber Eats</title>\n            </Helmet>\n            <div className=\" w-full max-w-screen-sm flex flex-col px-5 items-center\">\n                <img src={uberLogo} className=\"w-52 mb-10\" alt=\"uberLogo\"/>\n                <h4 className=\"w-full font-medium text-left text-3xl mb-5\">\n                    Welcome Back\n                </h4>\n                <h3 className=\"text-2xl text-gray-800\">Log In</h3>\n                <form\n                onSubmit={handleSubmit(onSubmit)}\n                className=\"grid gap-3 mt-5 w-full mb-5\"\n                >\n                    <input\n                    ref={register({ \n                        required: \"Email is required\", \n                        pattern: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                    })}\n                    name=\"email\"\n                    required\n                    type=\"email\"\n                    placeholder=\"Email\"\n                    className=\"input\"\n                    />\n                    {errors.email?.message && (\n                    <FormError errorMessage={errors.email?.message} />\n                    )}\n                    {errors.email?.type === \"pattern\" && (\n                        <FormError errorMessage={'Please enter a valid email'} />\n                    )}\n                    <input\n                    ref={register({ required: \"Password is required\" })}\n                    required\n                    name=\"password\"\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    className=\"input\"\n                    />\n                    {errors.password?.message && (\n                    <FormError errorMessage={errors.password?.message} />\n                    )}\n                    {errors.password?.type === \"minLength\" && (\n                    <FormError errorMessage=\"Password must be more than 10 chars.\" />\n                    )}\n                    <Button \n                        canClick={formState.isValid}\n                        loading={loading}\n                        actionText={\"Log in\"}\n                    />\n                    {loginMutationResult?.login.error && (\n                    <FormError errorMessage={loginMutationResult.login.error} />\n                    )}\n                </form>\n                <div>\n                    New to Uber?{\" \"}\n                    <Link to=\"/create-account\" className=\" text-lime-600 hover:underline\">\n                        Create an Account\n                    </Link>\n                </div>\n            </div>\n        </div>\n        );\n};","/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/form-error.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/button.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/constants.ts",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/routers/logged-in-router.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/404.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/header.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/client/restaurants.tsx",["147"],"import { gql, useQuery } from '@apollo/client';\nimport { url } from \"inspector\";\nimport React, { useState } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useForm } from 'react-hook-form';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Restaurant } from '../../components/restaurant';\nimport { CATEGORY_FRAGMENT, RESTAURANT_FRAGMENT } from '../../fragments';\nimport { restaurantsPageQuery, restaurantsPageQueryVariables } from '../../__generated__/restaurantsPageQuery';\n\nconst RESTAURANTS_QUERY = gql`\n    query restaurantsPageQuery($input: RestaurantsInput!){\n        allCategories {\n            ok\n            error\n            categories {\n                ...CategoryParts\n            }\n        }\n        restaurants(input: $input) {\n            ok\n            error\n            totalPages\n            totalResults\n            results {\n                ...RestaurantParts\n            }\n        }\n    }\n    ${RESTAURANT_FRAGMENT}\n    ${CATEGORY_FRAGMENT}\n`;\n\ninterface IFormProps {\n    searchTerm: string;\n}\n\nexport const Restaurants = () => {\n    const [page, setPage] = useState(1);\n    const { data, loading } = useQuery<\n        restaurantsPageQuery,\n        restaurantsPageQueryVariables\n    >(RESTAURANTS_QUERY, {\n        variables: {\n            input: {\n                page\n            },\n        },\n    });\n    const onNextPageClick = () => setPage((current) => current + 1);\n    const onPrevPageClick = () => setPage((current) => current -1);\n    const { register, handleSubmit, getValues} = useForm<IFormProps>();\n    const history = useHistory();\n    const onSearchSubmit = () => {\n        const { searchTerm } = getValues();\n        history.push({\n            pathname: \"/search\",\n            search: `?term=${searchTerm}`,\n        });\n    };\n    console.log(data);\n    return (\n        <div>\n            <Helmet>\n                <title>\n                    Home | Uber Eats\n                </title>\n            </Helmet>\n            <form \n                className=\"bg-gray-800 w-full py-40 flex items-center justify-center\"\n                onSubmit={handleSubmit(onSearchSubmit)}\n            >\n                <input \n                    ref={register({required: true, min: 3})}\n                    name=\"searchTerm\"\n                    type=\"Search\"\n                    className=\"input rounded-md border-0  w-3/4 md:w-3/12\"\n                    placeholder=\"Search Restaurants...\"    \n                />\n            </form>\n            {!loading && (\n                <div className=\" max-w-screen-2xl pb-20 mx-auto mt-8 \">\n                    <div className=\"flex justify-around max-w-sm mx-auto\">\n                        {data?.allCategories.categories?.map((category) =>(\n                            <Link key={category.id} to={`/category/${category.slug}`}>\n                                <div key={category.id} className=\"flex flex-col  group items-center cursor-pointer\">\n                                    <div\n                                        className=\"w-16 h-16 bg-cover group-hover:bg-gray-400 rounded-full\"\n                                        style={{ backgroundImage: `url(${category.coverImg})` }}\n                                    ></div>\n                                    <span className=\"mt-1 text-sm text-center font-medium\">\n                                        {category.name}\n                                    </span>\n                                </div>\n                            </Link>\n                        ))}\n                    </div>\n                    <div className=\"grid mt-16 md:grid-cols-3 gap-x-5 gap-y-10\">\n                        {data?.restaurants.results?.map((restaurant)=> (\n                            <Restaurant\n                                id={restaurant.id + \"\"}\n                                coverImg={restaurant.coverImg}\n                                name={restaurant.name}\n                                categoryName={restaurant.category?.name}\n                            />\n                        ))}\n                    </div>\n                    <div className=\"grid grid-cols-3 text-center max-w-md items-center mx-auto mt-10\">\n                        {page > 1 ? (\n                        <button\n                            onClick={onPrevPageClick}\n                            className=\"focus:outline-none font-medium text-2xl\"\n                        >\n                            &larr;\n                            </button>\n                        ) : (\n                        <div></div>\n                        )}\n                        <span>\n                            Page {page} of {data?.restaurants.totalPages}\n                        </span>\n                        {page !== data?.restaurants.totalPages ? (\n                            <button\n                                onClick={onNextPageClick}\n                                className=\"focus:outline-none font-medium text-2xl\"\n                            >\n                                &rarr;\n                            </button>\n                        ) : (\n                            <div></div>\n                        )}\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};","/Users/jayden/Documents/GitHub/ubereats-frontend/src/hooks/useMe.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/user/confirm-email.tsx",["148"],"import { gql, useApolloClient, useMutation } from \"@apollo/client\"\nimport { useEffect } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useHistory } from \"react-router-dom\";\nimport { useMe } from \"../../hooks/useMe\";\nimport { verifyEmail, verifyEmailVariables } from \"../../__generated__/verifyEmail\";\n\nconst VERYFY_EMAIL_MUTATION = gql`\n    mutation verifyEmail($input: VerifyEmailInput!) {\n        verifyEmail(input: $input){\n            ok\n            error\n        }\n    }    \n`;\n\nexport const ConfirmEmail = () => {\n    const { data: userData} = useMe();\n    const client = useApolloClient();\n    const history = useHistory();\n    const onCompleted = (data: verifyEmail) => {\n        const {\n            verifyEmail: {ok},\n        } = data;\n        if(ok && userData?.me.id){\n            client.writeFragment({\n                id:`User:${userData.me.id}`,\n                fragment: gql`\n                    fragment VerifiedUser on User {\n                        verified\n                    }\n                `,\n                data: {\n                    verified: true,\n                },\n            });\n            history.push(\"/\");\n        }\n    };\n    const [verifyEmail] = useMutation<\n        verifyEmail,\n        verifyEmailVariables\n        >(VERYFY_EMAIL_MUTATION, {\n            onCompleted,\n        });\n    useEffect(()=> {\n        const [_, code] = window.location.href.split('code=');\n        verifyEmail({\n            variables: {\n                input: {\n                    code,\n                },\n            },\n        });\n    }, [verifyEmail]);\n    return (\n        <div className=\"mt-52 flex flex-col items-center justify-center\">\n            <Helmet>\n                <title>Verify Email | Uber Eats</title>\n            </Helmet>\n            <h2 className=\"text-lg mb-1 font-medium\">Confirming email</h2>\n            <h4 className=\"text-gray-700 text-sm\">\n                Please wait, don't close this page...\n            </h4>\n        </div>\n    );\n};","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/user/edit-profile.tsx",["149","150"],"import { gql, useApolloClient, useMutation } from '@apollo/client';\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useForm } from 'react-hook-form';\nimport { Button } from '../../components/button';\nimport { useMe } from '../../hooks/useMe';\nimport { editProfile, editProfileVariables } from '../../__generated__/editProfile';\n\nconst EDIT_PROFILE_MUTATION = gql`\n    mutation editProfile($input: EditProfileInput!){\n        editProfile(input: $input) {\n            ok\n            error\n        }\n    }\n`;\n\ninterface IFormProps {\n    email?: string;\n    password?: string;\n};\n\n\nexport const EditProfile = () => {\n    const { data: userData } = useMe();\n    const client = useApolloClient();\n    const onCompleted = (data: editProfile) => {\n        const {\n            editProfile: {ok},\n        } = data;\n        if(ok && userData){\n            const {\n                me: {email: prevEmail, id}\n            }= userData;\n            const { email: newEmail} = getValues();\n            if (prevEmail !== newEmail) {\n                client.writeFragment({\n                    id: `User:${id}`,\n                    fragment: gql`\n                        fragment EditedUser on User {\n                            verified\n                            email\n                        }\n                    `,\n                    data: {\n                        email: newEmail,\n                        verified: false\n                    },\n                });\n            }\n        }\n    };\n    const [editProfile, {loading}] = useMutation<\n        editProfile,\n        editProfileVariables\n        >(EDIT_PROFILE_MUTATION, {\n            onCompleted,\n        });\n    const { register, handleSubmit, getValues, formState} = useForm<IFormProps>({\n        mode: \"onChange\",\n        defaultValues: {\n            email: userData?.me.email,\n        },\n    });\n    const onSubmit = () => {\n        const { email, password } = getValues();\n        editProfile({\n            variables: {\n                input: {\n                    email,\n                    ...(password !== \"\" && { password }),\n                },\n            },\n        });\n    };\n    return (\n        <div className=\"mt-52 flex  flex-col justify-center items-center\">\n            <Helmet>\n                <title>\n                    Edit Profile | Uber Eats\n                </title>\n            </Helmet>\n            <h4 className=\"font-semibold text-2xl mb-3\">Edit Profile</h4>\n            <form onSubmit={handleSubmit(onSubmit)} className=\"grid max-w-screen-sm gap-3 mt-5 w-full mb-5\">\n                <input ref={register({\n                    pattern: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                })}\n                name=\"email\" \n                className=\"input\" \n                type=\"email\" \n                placeholder=\"Email\" \n                />\n                <input ref={register} className=\"input\" name=\"password\" type=\"password\" placeholder=\"Password\" />\n                <Button loading={loading} canClick={formState.isValid} actionText=\"Save Profile\" />\n            </form>\n        </div>\n    );\n};","/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/app.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/client/restaurant.tsx",["151","152","153"],"import { gql, useMutation, useQuery } from '@apollo/client';\nimport React, { useState } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { Dish } from '../../components/dish';\nimport { DishOption } from '../../components/dish-option';\nimport { DISH_FRAGMENT, RESTAURANT_FRAGMENT } from '../../fragments';\nimport { createOrder, createOrderVariables } from '../../__generated__/createOrder';\nimport { CreateOrderItemInput } from \"../../__generated__/globalTypes\";\nimport {\n    restaurant,\n    restaurantVariables,\n  } from \"../../__generated__/restaurant\";\n  \n\nconst RESTAURANT_QUERY = gql`\n    query restaurant($input: RestaurantInput!) {\n        restaurant(input: $input) {\n            ok\n            error\n            restaurant {\n                ...RestaurantParts\n                menu {\n                    ...DishParts\n                }\n            }\n        }\n    }\n    ${RESTAURANT_FRAGMENT}\n    ${DISH_FRAGMENT}\n`;\n\nconst CREATE_ORDER_MUTATION = gql`\n  mutation createOrder($input: CreateOrderInput!) {\n    createOrder(input: $input) {\n      ok\n      error\n      orderId\n    }\n  }\n`;\n\ninterface IRestaurantParams {\n    id: string;\n}\n\nexport const Restaurant = () => {\n    const params = useParams<IRestaurantParams>();\n    const { loading, data } = useQuery<restaurant, restaurantVariables>(\n        RESTAURANT_QUERY,\n        {\n            variables: {\n                input: {\n                    restaurantId: +params.id\n                },\n            },\n        }\n    );\n    const [orderStarted, setOrderStarted] = useState(false);\n    const [orderItems, setOrderItems] = useState<CreateOrderItemInput[]>([]);\n    const triggerStartOrder = () => {\n        setOrderStarted(true);\n    };\n    const getItem = (dishId: number) => {\n        return orderItems.find((order) => order.dishId === dishId);\n      };\n    const isSelected = (dishId: number) => {\n        return Boolean(getItem(dishId));\n      };\n    const addItemToOrder = (dishId: number) => {\n        if (isSelected(dishId)) {\n            return;\n          }\n        setOrderItems((current) => [{ dishId, options: [] }, ...current]);\n    };\n    const removeFromOrder = (dishId: number) => {\n        setOrderItems((current) =>\n          current.filter((dish) => dish.dishId !== dishId)\n        );\n    };\n    const addOptionToItem = (dishId: number, optionName: string) => {\n        if (!isSelected(dishId)) {\n            return;\n        }\n        const oldItem = getItem(dishId);\n        if (oldItem) {\n            const hasOption = Boolean(\n                oldItem.options?.find((aOption) => aOption.name == optionName)\n              );\n            if (!hasOption) {\n                removeFromOrder(dishId);\n                setOrderItems((current) => [\n                    { dishId, options: [{name: optionName}, ...oldItem.options!] },\n                    ...current,\n                ]);\n            }\n        }\n    };\n    const removeOptionFromItem = (dishId: number, optionName: string) => {\n        if (!isSelected(dishId)) {\n          return;\n        }\n        const oldItem = getItem(dishId);\n        if (oldItem) {\n          removeFromOrder(dishId);\n          setOrderItems((current) => [\n            {\n              dishId,\n              options: oldItem.options?.filter(\n                (option) => option.name !== optionName\n              ),\n            },\n            ...current,\n          ]);\n          return;\n        }\n      };\n    const getOptionFromItem = (\n        item: CreateOrderItemInput,\n        optionName: string\n      ) => {\n        return item.options?.find((option) => option.name === optionName);\n      };\n    const isOptionSelected = (dishId: number, optionName: string) => {\n        const item = getItem(dishId);\n        if (item) {\n            return Boolean(getOptionFromItem(item, optionName));\n        }\n        return false;\n    };\n    const triggerCancelOrder = () => {\n        setOrderStarted(false);\n        setOrderItems([]);\n      };\n    const history = useHistory();\n    const onCompleted = (data: createOrder) => {\n        const {\n          createOrder: { ok, orderId },\n        } = data;\n        if (data.createOrder.ok) {\n          history.push(`/orders/${orderId}`);\n        }\n      };\n    const [createOrderMutation, { loading: placingOrder }] = useMutation<\n        createOrder,\n        createOrderVariables\n      >(CREATE_ORDER_MUTATION, {\n        onCompleted,\n      });\n    const triggerConfirmOrder = () => {\n        if (placingOrder) {\n          return;\n        }\n        if (orderItems.length === 0) {\n          alert(\"Can't place empty order\");\n          return;\n        }\n        const ok = window.confirm(\"You are about to place an order\");\n        if (ok) {\n          createOrderMutation({\n            variables: {\n              input: {\n                restaurantId: +params.id,\n                items: orderItems,\n              },\n            },\n          });\n        }\n      };\n    return (\n        <div>\n            <Helmet>\n                <title>{data?.restaurant.restaurant?.name || \"\"} | Uber Eats</title>\n            </Helmet>\n            <div\n                className=\" bg-gray-800 bg-center bg-cover py-48\"\n                style={{\n                    backgroundImage: `url(${data?.restaurant.restaurant?.coverImg})`,\n                }}\n            >\n            <div className=\"bg-white xl:w-3/12 py-8 pl-48\">\n                    <h4 className=\"text-4xl mb-3 \">{data?.restaurant.restaurant?.name}</h4>\n                    <h5 className=\"text-sm font-light mb-2\">\n                        {data?.restaurant.restaurant?.category?.name}\n                    </h5>\n                    <h6 className=\"text-sm font-light\">\n                        {data?.restaurant.restaurant?.address}\n                    </h6>\n                </div>\n            </div>\n            <div className=\"container pb-32 flex flex-col items-end mt-20\">\n                {!orderStarted && (\n                    <button onClick={triggerStartOrder} className=\"btn px-10\">\n                        Start Order\n                    </button>\n                )}\n                {orderStarted && (\n                <div className=\"flex items-center\">\n                    <button onClick={triggerConfirmOrder} className=\"btn px-10 mr-3\">\n                    Confirm Order\n                    </button>\n                    <button\n                    onClick={triggerCancelOrder}\n                    className=\"btn px-10 bg-black hover:bg-black\"\n                    >\n                    Cancel Order\n                    </button>\n                </div>\n                )}\n                <div className=\"w-full grid mt-16 md:grid-cols-3 gap-x-5 gap-y-10\">\n                    {data?.restaurant.restaurant?.menu.map((dish, index) => (\n                    <Dish\n                        isSelected={isSelected(dish.id)}\n                        id={dish.id}\n                        orderStarted={orderStarted}\n                        key={index}\n                        name={dish.name}\n                        description={dish.description}\n                        price={dish.price}\n                        isCustomer={true}\n                        options={dish.options}\n                        addItemToOrder={addItemToOrder}\n                        removeFromOrder={removeFromOrder}\n                    >\n                    {dish.options?.map((option, index) => (\n                        <DishOption \n                            key={index}\n                            dishId={dish.id}\n                            isSelected={isOptionSelected(dish.id, option.name)}\n                            name={option.name}\n                            extra={option.extra}\n                            addOptionToItem={addOptionToItem}\n                            removeOptionFromItem={removeOptionFromItem}\n                        />\n                    ))}\n                    </Dish>\n                    ))}\n                </div>\n            </div>\n        </div>\n    )\n};","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/client/category.tsx",["154"],"import { gql, useQuery } from \"@apollo/client\"\nimport { useParams } from \"react-router-dom\";\nimport { CATEGORY_FRAGMENT, RESTAURANT_FRAGMENT } from \"../../fragments\"\nimport { category, categoryVariables } from \"../../__generated__/category\";\n\n\nconst CATEGORY_QUERY = gql`\n    query category($input: CategoryInput!) {\n        category(input: $input) {\n            ok\n            error\n            totalPages\n            totalResults\n            restaurants {\n                ...RestaurantParts\n            }\n            category {\n                ...CategoryParts\n            }\n        }\n    }\n    ${RESTAURANT_FRAGMENT}\n    ${CATEGORY_FRAGMENT}\n`;\n\ninterface ICategoryParams {\n    slug: string;\n}\n\nexport const Category = () => {\n    const params = useParams<ICategoryParams>();\n    const { data, loading } = useQuery<category, categoryVariables>(\n        CATEGORY_QUERY,\n        {\n          variables: {\n            input: {\n              page: 1,\n              slug: params.slug,\n            },\n          },\n        }\n      );\n      console.log(data);\n    return <h1>Category</h1>;\n}","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/client/search.tsx",["155","156"],"import { gql, useLazyQuery } from \"@apollo/client\";\nimport { useEffect } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { RESTAURANT_FRAGMENT } from \"../../fragments\";\nimport { searchRestaurant, searchRestaurantVariables } from \"../../__generated__/searchRestaurant\";\n\n\nconst SEARCH_RESTAURANT = gql`\n    query searchRestaurant($input: SearchRestaurantInput!) {\n        searchRestaurant(input: $input) {\n            ok\n            error\n            totalPages\n            totalResults\n            restaurants {\n                ...RestaurantParts\n            }\n        }\n    }\n    ${RESTAURANT_FRAGMENT}\n`;\n\nexport const Search = () => {\n    const location = useLocation();\n    const history = useHistory();\n    const [callQuery, { loading, data, called }] = useLazyQuery<\n        searchRestaurant,\n        searchRestaurantVariables\n    >(SEARCH_RESTAURANT);\n    useEffect(() => {\n        const [_, query ] = location.search.split(\"?term=\");\n        if(!query){\n            return history.replace(\"/\");\n        }\n        callQuery({\n            variables: {\n                input: {\n                    page: 1,\n                    query,\n                },\n            },\n        });\n    }, [history, location]);\n    console.log(loading, data, called);\n    return (\n        <div>\n            <Helmet>\n                <title>\n                    Search | Uber Eats\n                </title>\n            </Helmet>\n            <h1>Search Page</h1>\n        </div>\n    );\n};\n","/Users/jayden/Documents/GitHub/ubereats-frontend/src/fragments.ts",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/restaurant.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/owner/my-restaurants.tsx",["157","158"],"import { gql, useApolloClient, useQuery } from '@apollo/client';\nimport React, { useEffect } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { Link } from 'react-router-dom';\nimport { Restaurant } from '../../components/restaurant';\nimport { RESTAURANT_FRAGMENT } from '../../fragments';\nimport { myRestaurants } from '../../__generated__/myRestaurants';\n\nexport const MY_RESTAURANTS_QUERY = gql`\n    query myRestaurants {\n        myRestaurants {\n            ok\n            error\n            restaurants {\n                ...RestaurantParts\n            }\n        }\n    }\n    ${RESTAURANT_FRAGMENT}\n`;\n\nexport const MyRestaurants = () => {\n    const { data } = useQuery<myRestaurants>(MY_RESTAURANTS_QUERY);\n    return (\n        <div>\n            <Helmet>\n                <title>My Restaurants | Uber Eats</title>\n            </Helmet>\n            <div className=\"max-w-screen-2xl mx-auto mt-32\">\n                <h2 className=\"text-4xl font-medium mb-10\">My Restaurants</h2>\n                {data?.myRestaurants.ok && data.myRestaurants.restaurants.length === 0 ? (\n                    <>\n                        <h4 className=\"text-xl mb-5\">You have no restaurants.</h4>\n                        <Link\n                            className=\"link\"\n                            to=\"/add-restaurant\"\n                        >\n                            Create one &rarr;\n                        </Link>\n                    </>\n                ):(\n                    <div className=\"grid mt-16 md:grid-cols-3 gap-x-5 gap-y-10\">\n                        {data?.myRestaurants.restaurants.map((restaurant) => (\n                            <Restaurant \n                                key={restaurant.id}\n                                id={restaurant.id + \"\"}\n                                coverImg={restaurant.coverImg}\n                                name={restaurant.name}\n                                categoryName={restaurant.category?.name}\n                            />\n                        ))}\n                    </div>\n                ) }\n            </div>\n        </div>\n    )\n}","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/owner/add-restaurants.tsx",["159"],"import { gql, useApolloClient, useMutation } from \"@apollo/client\";\nimport React, { useState } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router-dom\";\nimport { Button } from \"../../components/button\";\nimport { FormError } from \"../../components/form-error\";\nimport { createRestaurant, createRestaurantVariables } from \"../../__generated__/createRestaurant\";\nimport { MY_RESTAURANTS_QUERY } from \"./my-restaurants\";\n\n\nconst CREATE_RESTAURANT_MUTATION = gql`\n    mutation createRestaurant($input: CreateRestaurantInput!){\n        createRestaurant(input: $input) {\n            error\n            ok\n            restaurantId\n        }\n    }\n`;\n\ninterface IFormProps {\n    name: string;\n    address: string;\n    categoryName: string;\n    file: FileList;\n}\n\nexport const AddRestaurant = () => {\n    const client = useApolloClient();\n    const history = useHistory();\n    const [imageUrl, setImageUrl] = useState(\"\");\n    const onCompleted = (data: createRestaurant) => {\n        const {\n            createRestaurant: { ok, restaurantId }\n        } = data;\n        if (ok) {\n            const { name, categoryName, address } = getValues();\n            setUploading(false);\n            const queryResult = client.readQuery({query: MY_RESTAURANTS_QUERY});\n            client.writeQuery({\n                query: MY_RESTAURANTS_QUERY,\n                data: {\n                    myRestaurants: {\n                        ...queryResult.myRestaurants,\n                        restaurants: [\n                            {\n                                address,\n                                category: {\n                                    name: categoryName,\n                                    __typename: \"Category\"\n                                },\n                                coverImg: imageUrl,\n                                id: restaurantId,\n                                isPromoted: false,\n                                name,\n                                __typename: \"Restaurant\"\n                            },\n                            ...queryResult.myRestaurants.restaurants,\n                        ],\n                    },\n                },\n            });\n            history.push(\"/\");\n        }\n    }\n    const [createRestaurantMutation, { loading, data }] = useMutation<\n        createRestaurant,\n        createRestaurantVariables\n        >(CREATE_RESTAURANT_MUTATION, {\n            onCompleted\n        });\n    const {\n        register,\n        getValues,\n        formState,\n        handleSubmit,\n    } = useForm<IFormProps>({\n        mode: \"onChange\"\n    });\n    const [uploading, setUploading] = useState(false);\n    const onSubmit = async() => {\n        try {\n            setUploading(true);\n            const { file, name, categoryName, address } = getValues();\n            const actualFile = file[0];\n            const formBody = new FormData();\n            formBody.append('file', actualFile);\n            const { url: coverImg } = await (\n                await fetch(\"http://localhost:4000/uploads/\", {\n                    method: \"POST\",\n                    body: formBody\n                })\n            ).json();\n            setImageUrl(coverImg);\n            createRestaurantMutation({\n                variables: {\n                    input: {\n                        name,\n                        categoryName,\n                        address,\n                        coverImg\n                    },\n                },\n            });\n        }catch(e){\n\n        }\n    };\n    return (\n        <div className=\"container flex flex-col items-center mt-52\">\n            <Helmet>\n                <title>Add Restaurant | Uber Eats</title>\n            </Helmet>\n            <h4 className=\"font-semibold text-2xl mb-3\">Add Restaurant</h4>\n            <form onSubmit={handleSubmit(onSubmit)}\n                className=\"grid max-w-screen-sm gap-3 mt-5 w-full mb-5\"\n            >\n                <input \n                    className=\"input\"\n                    type = \"text\"\n                    name=\"name\"\n                    placeholder=\"Name\"\n                    ref={register({required: \"Name is required\"})}    \n                />\n                <input \n                    className=\"input\"\n                    type = \"text\"\n                    name = \"address\"\n                    placeholder= \"Address\"\n                    ref={register({required: \"Address is required\"})}\n                />\n                <input \n                    className=\"input\"\n                    type = \"text\"\n                    name = \"categoryName\"\n                    placeholder = \"Category Name\"\n                    ref = {register({required: \"Category Name is required\"})}\n                />\n                <div>\n                    <input \n                        type='file'\n                        name='file'\n                        accept='image/*'\n                        ref={register({required: true})}\n                    />\n                </div>\n                <Button \n                    loading={uploading}\n                    canClick={formState.isValid}\n                    actionText = \"Create Restaurant\"\n                />\n                {data?.createRestaurant?.error && (\n                    <FormError errorMessage={data.createRestaurant.error} />\n                )}\n            </form>\n        </div>\n    );\n};","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/owner/my-restaurant.tsx",["160"],"import { gql, useQuery, useSubscription } from \"@apollo/client\";\nimport React, { useEffect } from 'react';\nimport { Helmet } from \"react-helmet-async\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport { Dish } from \"../../components/dish\";\nimport { DISH_FRAGMENT, FULL_ORDER_FRAGMENT, ORDERS_FRAGMENT, RESTAURANT_FRAGMENT } from \"../../fragments\";\nimport { myRestaurant, myRestaurantVariables } from \"../../__generated__/myRestaurant\";\nimport {\n    VictoryAxis,\n    VictoryChart,\n    VictoryLabel,\n    VictoryVoronoiContainer,\n    VictoryLine,\n    VictoryTooltip,\n    VictoryTheme\n} from \"victory\";\nimport { pendingOrders } from \"../../__generated__/pendingOrders\";\n\nexport const MY_RESTAURANT_QUERY = gql`\n    query myRestaurant($input: MyRestaurantInput!){\n        myRestaurant(input: $input){\n            ok\n            error\n            restaurant {\n                ...RestaurantParts\n                menu {\n                    ...DishParts\n                }\n                orders {\n                    ...OrderParts\n                }\n            }\n        }\n    }\n    ${RESTAURANT_FRAGMENT}\n    ${DISH_FRAGMENT}\n    ${ORDERS_FRAGMENT}\n`;\n\ninterface IParams {\n    id: string;\n}\n\nconst PENDING_ORDERS_SUBSCRIPTION = gql`\nsubscription pendingOrders {\n  pendingOrders {\n    ...FullOrderParts\n  }\n}\n${FULL_ORDER_FRAGMENT}\n`;\n\nexport const MyRestaurant = () => {\n    const { id } = useParams<IParams>();\n    const { data } = useQuery<myRestaurant, myRestaurantVariables>(\n        MY_RESTAURANT_QUERY,\n        {\n            variables: {\n                input: {\n                    id: +id\n                },\n            },\n        },\n    );\n    \n    const { data: subscriptionData } = useSubscription<pendingOrders>(\n        PENDING_ORDERS_SUBSCRIPTION\n    );\n    const history = useHistory();\n    useEffect(() => {\n        if (subscriptionData?.pendingOrders.id) {\n            history.push(`/orders/${subscriptionData.pendingOrders.id}`)\n        }\n    }, [subscriptionData]);\n    return (\n        <div>\n            <Helmet>\n                <title>\n                    {data?.myRestaurant.restaurant?.name || \"Loading...\"} | Uber Eats\n                </title>\n            </Helmet>\n            <div\n                className=\"bg-gray-700  py-28 bg-center bg-cover\"\n                style={{\n                    backgroundImage: `url(${data?.myRestaurant.restaurant?.coverImg})`,\n                }}\n            ></div>\n            <div className=\"container mt-19\">\n                <h2 className=\"text-4xl font-medium mb-10\">\n                    {data?.myRestaurant.restaurant?.name || \"Loading...\"}\n                </h2>\n                <Link to={`/restaurants/${id}/add-dish`} className=\"mr-8 text-white bg-gray-800 py-3 px-10\">\n                    Add Dish &rarr;\n                </Link>\n                <Link to={``} className=\"text-white bg-lime-700 py-3 px-10\">\n                    Buy Promotion &rarr;\n                </Link >\n                <div className=\"mt-10\">\n                    {data?.myRestaurant.restaurant?.menu.length === 0 ? (\n                        <h4 className=\"text-xl mb-5\">Please upload a dish!</h4>\n                    ) : (\n                        <div className=\"grid mt-16 md:grid-cols-3 gap-x-5 gap-y-10\">\n                            {data?.myRestaurant.restaurant?.menu.map((dish) => (\n                                <Dish\n                                name={dish.name}\n                                description={dish.description}\n                                price={dish.price}\n                                />\n                            ))}\n                        </div>\n                    )}\n                    <div className=\"  mt-10\">\n            <VictoryChart\n              height={500}\n              theme={VictoryTheme.material}\n              width={window.innerWidth}\n              domainPadding={50}\n              containerComponent={<VictoryVoronoiContainer />}\n            >\n              <VictoryLine\n                labels={({ datum }) => `$${datum.y}`}\n                labelComponent={\n                  <VictoryTooltip\n                    style={{ fontSize: 18 } as any}\n                    renderInPortal\n                    dy={-20}\n                  />\n                }\n                data={data?.myRestaurant.restaurant?.orders.map((order) => ({\n                    x: order.createdAt,\n                    y: order.total,\n                }))}\n                interpolation=\"natural\"\n                style={{\n                  data: {\n                    strokeWidth: 5,\n                  },\n                }}\n              />\n              <VictoryAxis\n                tickLabelComponent={<VictoryLabel renderInPortal />}\n                style={{\n                  tickLabels: {\n                    fontSize: 20,\n                  } as any,\n                }}\n                tickFormat={(tick) => new Date(tick).toLocaleDateString(\"ko\")}\n              />\n            </VictoryChart>\n          </div>\n                </div>\n            </div>\n        </div>\n    )\n};","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/owner/add-dish.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/dish.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/dish-option.tsx",[],["161","162"],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/order.tsx",["163","164"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport React, { useEffect } from 'react';\nimport { Helmet } from \"react-helmet-async\";\nimport { useParams } from \"react-router-dom\";\nimport { FULL_ORDER_FRAGMENT } from \"../fragments\";\nimport { useMe } from \"../hooks/useMe\";\nimport { editOrder, editOrderVariables } from \"../__generated__/editOrder\";\nimport { getOrder, getOrderVariables } from \"../__generated__/getOrder\";\nimport { OrderStatus, UserRole } from \"../__generated__/globalTypes\";\nimport { orderUpdates } from \"../__generated__/orderUpdates\";\n\n\nconst GET_ORDER = gql`\n  query getOrder($input: GetOrderInput!) {\n    getOrder(input: $input) {\n      ok\n      error\n      order {\n        ...FullOrderParts\n      }\n    }\n  }\n  ${FULL_ORDER_FRAGMENT}\n`;\n\nconst ORDER_SUBSCRIPTION = gql`\n  subscription orderUpdates($input: OrderUpdatesInput!) {\n    orderUpdates(input: $input) {\n      ...FullOrderParts\n    }\n  }\n  ${FULL_ORDER_FRAGMENT}\n`;\n\nconst EDIT_ORDER = gql`\n  mutation editOrder($input: EditOrderInput!) {\n    editOrder(input: $input) {\n      ok\n      error\n    }\n  }\n`;\n\ninterface IParams {\n    id: string;\n}\n\nexport const Order = () => {\n    const params = useParams<IParams>();\n    const { data: userData } = useMe();\n    const [editOrderMutation] = useMutation<editOrder, editOrderVariables>(\n      EDIT_ORDER\n    );\n    const { data, subscribeToMore, error } = useQuery<getOrder, getOrderVariables>(GET_ORDER, {\n        variables: {\n            input: {\n                id: +params.id\n            },\n        },\n    });\n      useEffect(() => {\n      if (data?.getOrder.ok) {\n        subscribeToMore({\n          document: ORDER_SUBSCRIPTION,\n          variables: {\n            input: {\n              id: +params.id,\n            },\n          },\n          updateQuery: (\n            prev,\n            {\n              subscriptionData: { data },\n            }: { subscriptionData: { data: orderUpdates } }\n          ) => {\n            if (!data) return prev;\n            return {\n              getOrder: {\n                ...prev.getOrder,\n                order: {\n                  ...data.orderUpdates,\n                },\n              },\n            };\n          },\n        });\n      }\n    }, [data]);\n    const onButtonClick = (newStatus: OrderStatus) => {\n      editOrderMutation({\n        variables: {\n          input: {\n            id: +params.id,\n            status: newStatus\n          },\n        },\n      });\n    };\n    return (\n        <div className=\"mt-32 container flex justify-center\">\n          <Helmet>\n            <title>Order #{params.id} | Uber Eats</title>\n          </Helmet>\n          <div className=\"border border-gray-800 w-full max-w-screen-sm flex flex-col justify-center\">\n            <h4 className=\"bg-gray-800 w-full py-5 text-white text-center text-xl\">\n              Order #{params.id}\n            </h4>\n            <h5 className=\"p-5 pt-10 text-3xl text-center \">\n              ${data?.getOrder.order?.total}\n            </h5>\n            <div className=\"p-5 text-xl grid gap-6\">\n              <div className=\"border-t pt-5 border-gray-700\">\n                Prepared By:{\" \"}\n                <span className=\"font-medium\">\n                  {data?.getOrder.order?.restaurant?.name}\n                </span>\n              </div>\n              <div className=\"border-t pt-5 border-gray-700 \">\n                Deliver To:{\" \"}\n                <span className=\"font-medium\">\n                  {data?.getOrder.order?.customer?.email}\n                </span>\n              </div>\n              <div className=\"border-t border-b py-5 border-gray-700\">\n                Driver:{\" \"}\n                <span className=\"font-medium\">\n                  {data?.getOrder.order?.driver?.email || \"Not yet.\"}\n                </span>\n              </div>\n              {userData?.me.role === \"Client\" && (\n                <span className=\" text-center mt-5 mb-3  text-2xl text-lime-600\">\n                  Status: {data?.getOrder.order?.status}\n                </span>\n              )}\n              {userData?.me.role === UserRole.Owner && (\n                <>\n                  {data?.getOrder.order?.status === OrderStatus.Pending && (\n                    <button \n                      onClick={() => onButtonClick(OrderStatus.Cooking)}\n                      className=\"btn\"\n                    >Accept Order</button>\n                  )}\n                  {data?.getOrder.order?.status === OrderStatus.Cooking && (\n                    <button \n                      className=\"btn\"\n                      onClick={() => onButtonClick(OrderStatus.Cooked)}\n                    >Order Cooked\n                    </button>\n                  )}\n                  {data?.getOrder.order?.status !== OrderStatus.Cooking && \n                    data?.getOrder.order?.status !== OrderStatus.Pending &&(\n                      <span className=\" text-center mt-5 mb-3  text-2xl text-lime-600\">\n                        Status: {data?.getOrder.order?.status}\n                      </span>\n                    )}\n                </>\n              )}\n              {userData?.me.role === UserRole.Delivery && (\n                <>\n                  {data?.getOrder.order?.status === OrderStatus.Cooked && (\n                    <button\n                      onClick={() => onButtonClick(OrderStatus.PickedUp)}\n                      className=\"btn\"\n                    >\n                      Picked Up\n                    </button>\n                  )}\n                  {data?.getOrder.order?.status === OrderStatus.PickedUp && (\n                    <button\n                      onClick={() => onButtonClick(OrderStatus.Delivered)}\n                      className=\"btn\"\n                    >\n                      Order Delivered\n                    </button>\n                  )}\n                </>\n              )}\n              {data?.getOrder.order?.status === OrderStatus.Delivered && (\n                <span className=\" text-center mt-5 mb-3  text-2xl text-lime-600\">\n                  Thank you for using Nuber Eats\n                </span>\n              )}\n            </div>\n          </div>\n        </div>\n      );\n}","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/driver/dashboard.tsx",["165","166","167"],"import { gql, useMutation, useSubscription } from '@apollo/client';\nimport  GoogleMapReact from 'google-map-react';\nimport React, { useEffect, useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { FULL_ORDER_FRAGMENT } from '../../fragments';\nimport { cookedOrders } from '../../__generated__/cookedOrders';\nimport { takeOrder, takeOrderVariables } from '../../__generated__/takeOrder';\n\n\nconst COOKED_ORDERS_SUBSCRIPTION = gql`\n    subscription cookedOrders {\n        cookedOrders{\n            ...FullOrderParts\n        }\n    }\n    ${FULL_ORDER_FRAGMENT}\n`;\n\nconst TAKE_ORDER_MUTATION = gql`\n    mutation takeOrder($input: TakeOrderInput!){\n        takeOrder(input: $input){\n            ok\n            error\n        }\n    }\n`;\n\ninterface ICoords{\n    lat: number;\n    lng: number;\n}\n\ninterface IDriverProps {\n    lat: number;\n    lng: number;\n    $hover?: any;\n}\n\nconst Driver: React.FC<IDriverProps> = () => <div className=\"text-lg\">🛵</div>;\n\nexport const Dashboard = () => {\n    const [driverCoords, setDriverCoords] = useState<ICoords>({ lng: 0, lat: 0 });\n    const [map, setMap] = useState<google.maps.Map>();\n    const [maps, setMaps] = useState<any>();\n    //@ts-ignore\n    const onSuccess = ({ coords: { latitude, longitude } }: Position) => {\n        setDriverCoords({ lat: latitude, lng: longitude});\n    };\n    // @ts-ignore\n    const onError = (error: PositionError) => {\n        console.log(error);\n    };\n    \n    useEffect(() => {\n        navigator.geolocation.watchPosition(onSuccess, onError, {\n            enableHighAccuracy: true\n        });\n    }, []);\n    useEffect(() => {\n        if (map && maps) {\n          map.panTo(new google.maps.LatLng(driverCoords.lat, driverCoords.lng));\n          const geocoder= new google.maps.Geocoder();\n          geocoder.geocode(\n              {\n                  location: new google.maps.LatLng(driverCoords.lat, driverCoords.lng),\n              },\n              (results, status) => {\n                  console.log(status, results);\n              }\n          );\n        }\n      }, [driverCoords.lat, driverCoords.lng]);\n    const onApiLoaded = ({ map, maps }: { map: any; maps: any }) => {\n        map.panTo(new google.maps.LatLng(driverCoords.lat, driverCoords.lng));\n        setMap(map);\n        setMaps(maps);\n      };\n    const makeRoute = () => {\n        if (map) {\n            const directionsService = new google.maps.DirectionsService();\n            const directionsRenderer = new google.maps.DirectionsRenderer({\n                polylineOptions: {\n                    strokeColor: \"#000\",\n                    strokeOpacity: 0.9,\n                    strokeWeight: 5\n                }\n            });\n            directionsRenderer.setMap(map);\n            directionsService.route({\n                origin: {\n                    location: new google.maps.LatLng(\n                        driverCoords.lat,\n                        driverCoords.lng\n                    ),\n                },\n                destination: {\n                    location: new google.maps.LatLng(\n                        driverCoords.lat + 0.01,\n                        driverCoords.lng + 0.01\n                    ),\n                },\n                travelMode: google.maps.TravelMode.TRANSIT,\n                },\n                (result) => {\n                    directionsRenderer.setDirections(result);\n                }\n            );\n        }\n    };\n    const { data: cookedOrdersData } = useSubscription<cookedOrders>(\n        COOKED_ORDERS_SUBSCRIPTION\n    );\n    useEffect(() => {\n        if(cookedOrdersData?.cookedOrders.id){\n            makeRoute();\n        }\n    }, [cookedOrdersData]);\n    const history = useHistory();\n    const onCompleted = (data: takeOrder) => {\n        if(data.takeOrder.ok){\n            history.push(`/orders/${cookedOrdersData?.cookedOrders.id}`);\n        }\n    };\n    const [takeOrderMutation] = useMutation<takeOrder, takeOrderVariables>(\n        TAKE_ORDER_MUTATION, { onCompleted }\n    );\n    const triggerMutation = (orderId: number) => {\n        takeOrderMutation({\n            variables: {\n                input: {\n                    id: orderId,\n                },\n            },\n        });\n    };\n    return (\n        <div>\n            <div\n                className=\"overflow-hidden\"\n                style={{ width: window.innerWidth, height: \"50vh\" }}\n                >\n                <GoogleMapReact\n                    yesIWantToUseGoogleMapApiInternals\n                    onGoogleApiLoaded={onApiLoaded}\n                    defaultZoom={16}\n                    draggable={true}\n                    defaultCenter={{\n                        lat: 36.58,\n                        lng: 125.95\n                    }}\n                    bootstrapURLKeys={{ key: \"AIzaSyA5EIs-B3PN1V_b4Ib6-pCc9djVGtN26ho\" }}\n                >\n                    <Driver lat={driverCoords.lat} lng={driverCoords.lng} />\n                </GoogleMapReact>\n            </div>\n            <div className=\" max-w-screen-sm mx-auto bg-white relative -top-10 shadow-lg py-8 px-5\">\n                {cookedOrdersData?.cookedOrders.restaurant ? (\n                <>\n                    <h1 className=\"text-center  text-3xl font-medium\">\n                    New Coocked Order\n                    </h1>\n                    <h1 className=\"text-center my-3 text-2xl font-medium\">\n                    Pick it up soon @{\" \"}\n                    {cookedOrdersData?.cookedOrders.restaurant?.name}\n                    </h1>\n                    <button\n                        onClick={() => \n                            triggerMutation(cookedOrdersData.cookedOrders.id)\n                        }\n                        className=\"btn w-full  block  text-center mt-5\"\n                    >\n                        Accept Challenge &rarr;\n                    </button>\n                </>\n                ) : (\n                <h1 className=\"text-center  text-3xl font-medium\">\n                    No orders yet...\n                </h1>\n                )}\n            </div>\n        </div>\n    );\n};","/Users/jayden/Documents/GitHub/ubereats-frontend/src/__generated__/globalTypes.ts",[],{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","replacedBy":"171"},{"ruleId":"172","severity":1,"message":"173","line":83,"column":44,"nodeType":"174","messageId":"175","endLine":83,"endColumn":45,"suggestions":"176"},{"ruleId":"172","severity":1,"message":"173","line":83,"column":69,"nodeType":"174","messageId":"175","endLine":83,"endColumn":70,"suggestions":"177"},{"ruleId":"172","severity":1,"message":"173","line":81,"column":44,"nodeType":"174","messageId":"175","endLine":81,"endColumn":45,"suggestions":"178"},{"ruleId":"172","severity":1,"message":"173","line":81,"column":69,"nodeType":"174","messageId":"175","endLine":81,"endColumn":70,"suggestions":"179"},{"ruleId":"180","severity":1,"message":"181","line":2,"column":10,"nodeType":"182","messageId":"183","endLine":2,"endColumn":13},{"ruleId":"180","severity":1,"message":"184","line":47,"column":16,"nodeType":"182","messageId":"183","endLine":47,"endColumn":17},{"ruleId":"172","severity":1,"message":"173","line":86,"column":40,"nodeType":"174","messageId":"175","endLine":86,"endColumn":41,"suggestions":"185"},{"ruleId":"172","severity":1,"message":"173","line":86,"column":65,"nodeType":"174","messageId":"175","endLine":86,"endColumn":66,"suggestions":"186"},{"ruleId":"180","severity":1,"message":"187","line":49,"column":13,"nodeType":"182","messageId":"183","endLine":49,"endColumn":20},{"ruleId":"188","severity":1,"message":"189","line":88,"column":65,"nodeType":"190","messageId":"191","endLine":88,"endColumn":67},{"ruleId":"180","severity":1,"message":"192","line":138,"column":26,"nodeType":"182","messageId":"183","endLine":138,"endColumn":28},{"ruleId":"180","severity":1,"message":"187","line":32,"column":19,"nodeType":"182","messageId":"183","endLine":32,"endColumn":26},{"ruleId":"180","severity":1,"message":"184","line":32,"column":16,"nodeType":"182","messageId":"183","endLine":32,"endColumn":17},{"ruleId":"193","severity":1,"message":"194","line":44,"column":8,"nodeType":"195","endLine":44,"endColumn":27,"suggestions":"196"},{"ruleId":"180","severity":1,"message":"197","line":1,"column":15,"nodeType":"182","messageId":"183","endLine":1,"endColumn":30},{"ruleId":"180","severity":1,"message":"198","line":2,"column":17,"nodeType":"182","messageId":"183","endLine":2,"endColumn":26},{"ruleId":"180","severity":1,"message":"187","line":67,"column":40,"nodeType":"182","messageId":"183","endLine":67,"endColumn":47},{"ruleId":"193","severity":1,"message":"199","line":74,"column":8,"nodeType":"195","endLine":74,"endColumn":26,"suggestions":"200"},{"ruleId":"168","replacedBy":"201"},{"ruleId":"170","replacedBy":"202"},{"ruleId":"180","severity":1,"message":"203","line":54,"column":36,"nodeType":"182","messageId":"183","endLine":54,"endColumn":41},{"ruleId":"193","severity":1,"message":"204","line":88,"column":8,"nodeType":"195","endLine":88,"endColumn":14,"suggestions":"205"},{"ruleId":"180","severity":1,"message":"206","line":4,"column":10,"nodeType":"182","messageId":"183","endLine":4,"endColumn":14},{"ruleId":"193","severity":1,"message":"207","line":72,"column":10,"nodeType":"195","endLine":72,"endColumn":46,"suggestions":"208"},{"ruleId":"193","severity":1,"message":"209","line":117,"column":8,"nodeType":"195","endLine":117,"endColumn":26,"suggestions":"210"},"no-native-reassign",["211"],"no-negated-in-lhs",["212"],"no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["213","214"],["215","216"],["217","218"],["219","220"],"@typescript-eslint/no-unused-vars","'url' is defined but never used.","Identifier","unusedVar","'_' is assigned a value but never used.",["221","222"],["223","224"],"'loading' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'ok' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'callQuery'. Either include it or remove the dependency array.","ArrayExpression",["225"],"'useApolloClient' is defined but never used.","'useEffect' is defined but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["226"],["211"],["212"],"'error' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'params.id' and 'subscribeToMore'. Either include them or remove the dependency array.",["227"],"'Link' is defined but never used.","React Hook useEffect has missing dependencies: 'map' and 'maps'. Either include them or remove the dependency array.",["228"],"React Hook useEffect has a missing dependency: 'makeRoute'. Either include it or remove the dependency array.",["229"],"no-global-assign","no-unsafe-negation",{"messageId":"230","fix":"231","desc":"232"},{"messageId":"233","fix":"234","desc":"235"},{"messageId":"230","fix":"236","desc":"232"},{"messageId":"233","fix":"237","desc":"235"},{"messageId":"230","fix":"238","desc":"232"},{"messageId":"233","fix":"239","desc":"235"},{"messageId":"230","fix":"240","desc":"232"},{"messageId":"233","fix":"241","desc":"235"},{"messageId":"230","fix":"242","desc":"232"},{"messageId":"233","fix":"243","desc":"235"},{"messageId":"230","fix":"244","desc":"232"},{"messageId":"233","fix":"245","desc":"235"},{"desc":"246","fix":"247"},{"desc":"248","fix":"249"},{"desc":"250","fix":"251"},{"desc":"252","fix":"253"},{"desc":"254","fix":"255"},"removeEscape",{"range":"256","text":"257"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"258","text":"259"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"260","text":"257"},{"range":"261","text":"259"},{"range":"262","text":"257"},{"range":"263","text":"259"},{"range":"264","text":"257"},{"range":"265","text":"259"},{"range":"266","text":"257"},{"range":"267","text":"259"},{"range":"268","text":"257"},{"range":"269","text":"259"},"Update the dependencies array to be: [callQuery, history, location]",{"range":"270","text":"271"},"Update the dependencies array to be: [history, subscriptionData]",{"range":"272","text":"273"},"Update the dependencies array to be: [data, params.id, subscribeToMore]",{"range":"274","text":"275"},"Update the dependencies array to be: [driverCoords.lat, driverCoords.lng, map, maps]",{"range":"276","text":"277"},"Update the dependencies array to be: [cookedOrdersData, makeRoute]",{"range":"278","text":"279"},[2779,2780],"",[2779,2779],"\\",[2804,2805],[2804,2804],[2584,2585],[2584,2584],[2609,2610],[2609,2609],[2648,2649],[2648,2648],[2673,2674],[2673,2673],[1270,1289],"[callQuery, history, location]",[1978,1996],"[history, subscriptionData]",[2222,2228],"[data, params.id, subscribeToMore]",[2074,2110],"[driverCoords.lat, driverCoords.lng, map, maps]",[3656,3674],"[cookedOrdersData, makeRoute]"]