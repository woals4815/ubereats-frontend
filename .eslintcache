[{"/Users/jayden/Documents/GitHub/ubereats-frontend/src/index.tsx":"1","/Users/jayden/Documents/GitHub/ubereats-frontend/src/apollo.ts":"2","/Users/jayden/Documents/GitHub/ubereats-frontend/src/reportWebVitals.ts":"3","/Users/jayden/Documents/GitHub/ubereats-frontend/src/App.tsx":"4","/Users/jayden/Documents/GitHub/ubereats-frontend/src/constants.ts":"5","/Users/jayden/Documents/GitHub/ubereats-frontend/src/routers/logged-out-router.tsx":"6","/Users/jayden/Documents/GitHub/ubereats-frontend/src/routers/logged-in-router.tsx":"7","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/create-account.tsx":"8","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/login.tsx":"9","/Users/jayden/Documents/GitHub/ubereats-frontend/src/hooks/useMe.tsx":"10","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/client/restaurants.tsx":"11","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/404.tsx":"12","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/user/edit-profile.tsx":"13","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/user/confirm-email.tsx":"14","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/client/search.tsx":"15","/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/header.tsx":"16","/Users/jayden/Documents/GitHub/ubereats-frontend/src/fragments.ts":"17","/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/button.tsx":"18","/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/restaurant.tsx":"19","/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/form-error.tsx":"20","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/client/category.tsx":"21","/Users/jayden/Documents/GitHub/ubereats-frontend/src/__generated__/globalTypes.ts":"22"},{"size":758,"mtime":1609133110120,"results":"23","hashOfConfig":"24"},{"size":977,"mtime":1609134644242,"results":"25","hashOfConfig":"24"},{"size":425,"mtime":1608821013862,"results":"26","hashOfConfig":"24"},{"size":399,"mtime":1609132409897,"results":"27","hashOfConfig":"24"},{"size":47,"mtime":1609132429855,"results":"28","hashOfConfig":"24"},{"size":666,"mtime":1609138638070,"results":"29","hashOfConfig":"24"},{"size":1479,"mtime":1609243071882,"results":"30","hashOfConfig":"24"},{"size":5131,"mtime":1609138528940,"results":"31","hashOfConfig":"24"},{"size":4526,"mtime":1609132968051,"results":"32","hashOfConfig":"24"},{"size":319,"mtime":1609141555212,"results":"33","hashOfConfig":"24"},{"size":5218,"mtime":1609243603242,"results":"34","hashOfConfig":"24"},{"size":638,"mtime":1609232811000,"results":"35","hashOfConfig":"24"},{"size":3220,"mtime":1609205311662,"results":"36","hashOfConfig":"24"},{"size":1995,"mtime":1609205277169,"results":"37","hashOfConfig":"24"},{"size":1548,"mtime":1609235743959,"results":"38","hashOfConfig":"24"},{"size":1194,"mtime":1609204804559,"results":"39","hashOfConfig":"24"},{"size":422,"mtime":1609242610544,"results":"40","hashOfConfig":"24"},{"size":483,"mtime":1609056342606,"results":"41","hashOfConfig":"24"},{"size":608,"mtime":1609232488278,"results":"42","hashOfConfig":"24"},{"size":234,"mtime":1609029786996,"results":"43","hashOfConfig":"24"},{"size":1085,"mtime":1609243299668,"results":"44","hashOfConfig":"24"},{"size":1077,"mtime":1609244436110,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"18f0r1h",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"48"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jayden/Documents/GitHub/ubereats-frontend/src/index.tsx",[],["99","100"],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/apollo.ts",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/reportWebVitals.ts",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/App.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/constants.ts",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/routers/logged-out-router.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/routers/logged-in-router.tsx",["101"],"import React from \"react\";\nimport { BrowserRouter as Router, Redirect, Route, Switch } from \"react-router-dom\";\nimport { Header } from \"../components/header\";\nimport { useMe } from \"../hooks/useMe\";\nimport { NotFound } from \"../pages/404\";\nimport { Category } from \"../pages/client/category\";\nimport { Restaurants } from \"../pages/client/restaurants\";\nimport { Search } from \"../pages/client/search\";\nimport { ConfirmEmail } from \"../pages/user/confirm-email\";\nimport { EditProfile } from \"../pages/user/edit-profile\";\n\nconst ClientRoutes = [\n    <Route key={1} path=\"/\" exact>\n        <Restaurants />\n    </Route>,\n    <Route key={2} path=\"/confirm\">\n        <ConfirmEmail />\n    </Route>,\n    <Route key={3} path=\"/edit-profile\">\n        <EditProfile />\n    </Route>,\n    <Route key={4} path=\"/search\">\n        <Search />\n    </Route>,\n    <Route key={5} path=\"/category/:slug\">\n        <Category />\n    </Route>\n];\n\n\nexport const LoggedInRouter = () => {\n    const {data, loading, error} = useMe();\n    if(loading || !data || error){\n        return (\n            <div className=\" h-screen flex justify-center items-center\">\n                <span className=\"font-medium text-xl tracking-wide\">Loading...</span>\n            </div>\n        );\n    }\n    return (\n    <Router>\n        <Header />\n        <Switch>\n            {data.me.role === 'Client' && ClientRoutes}\n            <Route>\n                <NotFound />\n            </Route>\n        </Switch>\n    </Router>\n    );\n};\n","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/create-account.tsx",["102","103"],"import { gql, useMutation } from \"@apollo/client\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { FormError } from \"../components/form-error\";\nimport uberLogo from '../images/eats-logo.svg';\nimport { Button } from \"../components/button\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet-async\";\nimport { UserRole } from \"../__generated__/globalTypes\";\nimport { createAccountMutation, createAccountMutationVariables } from \"../__generated__/createAccountMutation\";\n\nconst CREATE_ACCOUNT_MUTATION = gql`\nmutation createAccountMutation($createAccountInput: CreateAccountInput!) {\n    createAccount(input: $createAccountInput) {\n      ok\n      error\n    }\n  }\n`;\ninterface ICreateAccountForm {\n    email: string;\n    password: string;\n    role: UserRole;\n  }\n  \n  export const CreateAccount = () => {\n    const { register, \n            getValues,\n            errors, \n            handleSubmit, \n            formState \n        } = useForm<ICreateAccountForm>({\n        mode: 'onChange',\n        defaultValues: {\n            role: UserRole.Client,\n        },\n    });\n    const history = useHistory();\n    const onCompleted = (data: createAccountMutation) => {\n        const {\n            createAccount: { ok }\n        } = data;\n        if(ok){\n            history.push('/');\n        }\n    };\n    const [\n        createAccountMutation,\n        {loading, data: createAccountMutationResult},\n        ] = useMutation<createAccountMutation, createAccountMutationVariables>(\n            CREATE_ACCOUNT_MUTATION,\n            {\n                onCompleted,\n            });\n    const onSubmit = () => {\n        if(!loading){\n            const { email, password, role } = getValues();\n            createAccountMutation({\n                variables: {\n                    createAccountInput: { email, password, role}\n                }\n            });\n        }\n    };\n    return (\n        <div className=\"h-screen flex items-center flex-col mt-10 lg:mt-28\">\n            <Helmet>\n                <title>Create Account | Uber Eats</title>\n            </Helmet>\n            <div className=\" w-full max-w-screen-sm flex flex-col px-5 items-center\">\n                <img src={uberLogo} className=\"w-52 mb-10\" alt=\"uberLogo\"/>\n                <h4 className=\"w-full font-medium text-left text-3xl mb-5\">\n                    Let's get started\n                </h4>\n                <form\n                onSubmit={handleSubmit(onSubmit)}\n                className=\"grid gap-3 mt-5 w-full mb-5\"\n                >\n                    <input\n                    ref={register({ \n                        required: \"Email is required\", \n                        pattern: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/ \n                    })}\n                    name=\"email\"\n                    required\n                    type=\"email\"\n                    placeholder=\"Email\"\n                    className=\"input\"\n                    />\n                    {errors.email?.message && (\n                    <FormError errorMessage={errors.email?.message} />\n                    )}\n                    {errors.email?.type === 'pattern' && (\n                        <FormError errorMessage={'Please enter a vaild email'} />\n                    )}\n                    <input\n                    ref={register({ required: \"Password is required\" })}\n                    required\n                    name=\"password\"\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    className=\"input\"\n                    />\n                    {errors.password?.message && (\n                    <FormError errorMessage={errors.password?.message} />\n                    )}\n                    {errors.password?.type === \"minLength\" && (\n                    <FormError errorMessage=\"Password must be more than 10 chars.\" />\n                    )}\n                    <select\n                        name='role'\n                        ref={register({required: true})}\n                        className=\"input\"\n                    >\n                        {Object.keys(UserRole).map((role, index) => (\n                            <option key={index}>{role}</option>\n                        ))}\n                    </select>\n                    <Button \n                        canClick={formState.isValid}\n                        loading={loading}\n                        actionText={\"Create Account\"}\n                    />\n                    {createAccountMutationResult?.createAccount.error && (\n                        <FormError\n                            errorMessage={createAccountMutationResult.createAccount.error} />\n                    )}\n                </form>\n                <div>\n                    Already have an account?{\" \"}\n                    <Link to=\"/\" className=\" text-lime-600 hover:underline\">\n                        Login now\n                    </Link>\n                </div>\n            </div>\n        </div>\n        );\n    };","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/login.tsx",["104","105"],"import { gql, useMutation } from \"@apollo/client\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { FormError } from \"../components/form-error\";\nimport {\n  loginMutation,\n  loginMutationVariables,\n} from \"../__generated__/loginMutation\";\nimport uberLogo from '../images/eats-logo.svg';\nimport { Button } from \"../components/button\";\nimport { Link } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet-async\";\nimport { authTokenVar, isLoggedInVar } from \"../apollo\";\nimport { LOCALSTORAGE_TOKEN } from \"../constants\";\n\nconst LOGIN_MUTATION = gql`\nmutation loginMutation($loginInput: LoginInput!) {\n    login(input: $loginInput) {\n      ok\n      token\n      error\n    }\n  }\n`;\ninterface ILoginForm {\n    email: string;\n    password: string;\n    resultError?: string;\n  }\n  \n  export const Login = () => {\n    const { register, getValues, errors, handleSubmit, formState } = useForm<ILoginForm>({\n        mode: 'onChange'\n    });\n    const onCompleted = (data: loginMutation) => {\n        const {\n          login: { ok, token },\n        } = data;\n        if (ok && token) {\n          localStorage.setItem(LOCALSTORAGE_TOKEN, token);\n          authTokenVar(token);\n          isLoggedInVar(true);\n        }\n      };\n    const [loginMutation, { data: loginMutationResult, loading }] = useMutation<\n    loginMutation,\n    loginMutationVariables\n    >(LOGIN_MUTATION, {\n        onCompleted,\n        });\n    const onSubmit = () => {\n    if(!loading){    \n        const { email, password } = getValues();\n        loginMutation({\n        variables: {\n            loginInput: {\n                email,\n                password,\n            },\n            },\n        });}\n    };\n    return (\n        <div className=\"h-screen flex items-center flex-col mt-10 lg:mt-28\">\n            <Helmet>\n                <title>Login | Uber Eats</title>\n            </Helmet>\n            <div className=\" w-full max-w-screen-sm flex flex-col px-5 items-center\">\n                <img src={uberLogo} className=\"w-52 mb-10\" alt=\"uberLogo\"/>\n                <h4 className=\"w-full font-medium text-left text-3xl mb-5\">\n                    Welcome Back\n                </h4>\n                <h3 className=\"text-2xl text-gray-800\">Log In</h3>\n                <form\n                onSubmit={handleSubmit(onSubmit)}\n                className=\"grid gap-3 mt-5 w-full mb-5\"\n                >\n                    <input\n                    ref={register({ \n                        required: \"Email is required\", \n                        pattern: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                    })}\n                    name=\"email\"\n                    required\n                    type=\"email\"\n                    placeholder=\"Email\"\n                    className=\"input\"\n                    />\n                    {errors.email?.message && (\n                    <FormError errorMessage={errors.email?.message} />\n                    )}\n                    {errors.email?.type === \"pattern\" && (\n                        <FormError errorMessage={'Please enter a valid email'} />\n                    )}\n                    <input\n                    ref={register({ required: \"Password is required\" })}\n                    required\n                    name=\"password\"\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    className=\"input\"\n                    />\n                    {errors.password?.message && (\n                    <FormError errorMessage={errors.password?.message} />\n                    )}\n                    {errors.password?.type === \"minLength\" && (\n                    <FormError errorMessage=\"Password must be more than 10 chars.\" />\n                    )}\n                    <Button \n                        canClick={formState.isValid}\n                        loading={loading}\n                        actionText={\"Log in\"}\n                    />\n                    {loginMutationResult?.login.error && (\n                    <FormError errorMessage={loginMutationResult.login.error} />\n                    )}\n                </form>\n                <div>\n                    New to Uber?{\" \"}\n                    <Link to=\"/create-account\" className=\" text-lime-600 hover:underline\">\n                        Create an Account\n                    </Link>\n                </div>\n            </div>\n        </div>\n        );\n    };","/Users/jayden/Documents/GitHub/ubereats-frontend/src/hooks/useMe.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/client/restaurants.tsx",["106"],"import { gql, useQuery } from '@apollo/client';\nimport { url } from \"inspector\";\nimport React, { useState } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useForm } from 'react-hook-form';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Restaurant } from '../../components/restaurant';\nimport { CATEGORY_FRAGMENT, RESTAURANT_FRAGMENT } from '../../fragments';\nimport { restaurantsPageQuery, restaurantsPageQueryVariables } from '../../__generated__/restaurantsPageQuery';\n\nconst RESTAURANTS_QUERY = gql`\n    query restaurantsPageQuery($input: RestaurantsInput!){\n        allCategories {\n            ok\n            error\n            categories {\n                ...CategoryParts\n            }\n        }\n        restaurants(input: $input) {\n            ok\n            error\n            totalPages\n            totalResults\n            results {\n                ...RestaurantParts\n            }\n        }\n    }\n    ${RESTAURANT_FRAGMENT}\n    ${CATEGORY_FRAGMENT}\n`;\n\ninterface IFormProps {\n    searchTerm: string;\n}\n\nexport const Restaurants = () => {\n    const [page, setPage] = useState(1);\n    const { data, loading } = useQuery<\n        restaurantsPageQuery,\n        restaurantsPageQueryVariables\n    >(RESTAURANTS_QUERY, {\n        variables: {\n            input: {\n                page\n            },\n        },\n    });\n    const onNextPageClick = () => setPage((current) => current + 1);\n    const onPrevPageClick = () => setPage((current) => current -1);\n    const { register, handleSubmit, getValues} = useForm<IFormProps>();\n    const history = useHistory();\n    const onSearchSubmit = () => {\n        const { searchTerm } = getValues();\n        history.push({\n            pathname: \"/search\",\n            search: `?term=${searchTerm}`,\n        });\n    };\n    return (\n        <div>\n            <Helmet>\n                <title>\n                    Home | Uber Eats\n                </title>\n            </Helmet>\n            <form \n                className=\"bg-gray-800 w-full py-40 flex items-center justify-center\"\n                onSubmit={handleSubmit(onSearchSubmit)}\n            >\n                <input \n                    ref={register({required: true, min: 3})}\n                    name=\"searchTerm\"\n                    type=\"Search\"\n                    className=\"input rounded-md border-0  w-3/4 md:w-3/12\"\n                    placeholder=\"Search Restaurants...\"    \n                />\n            </form>\n            {!loading && (\n                <div className=\" max-w-screen-2xl mx-auto mt-8 pb-20\">\n                    <div className=\"flex justify-around max-w-sm mx-auto\">\n                        {data?.allCategories.categories?.map((category) =>(\n                            <Link key={category.id} to={`/category/${category.slug}`}>\n                                <div key={category.id} className=\"flex flex-col  group items-center cursor-pointer\">\n                                    <div\n                                        className=\"w-16 h-16 bg-cover group-hover:bg-gray-400 rounded-full\"\n                                        style={{ backgroundImage: `url(${category.coverImg})` }}\n                                    ></div>\n                                    <span className=\"mt-1 text-sm text-center font-medium\">\n                                        {category.name}\n                                    </span>\n                                </div>\n                            </Link>\n                        ))}\n                    </div>\n                    <div className=\"grid mt-16 md:grid-cols-3 gap-x-5 gap-y-10\">\n                        {data?.restaurants.results?.map((restaurant)=> (\n                            <Restaurant\n                                id={restaurant.id + \"\"}\n                                coverImg={restaurant.coverImg}\n                                name={restaurant.name}\n                                categoryName={restaurant.category?.name}\n                            />\n                        ))}\n                    </div>\n                    <div className=\"grid grid-cols-3 text-center max-w-md items-center mx-auto mt-10\">\n                        {page > 1 ? (\n                        <button\n                            onClick={onPrevPageClick}\n                            className=\"focus:outline-none font-medium text-2xl\"\n                        >\n                            &larr;\n                            </button>\n                        ) : (\n                        <div></div>\n                        )}\n                        <span>\n                            Page {page} of {data?.restaurants.totalPages}\n                        </span>\n                        {page !== data?.restaurants.totalPages ? (\n                            <button\n                                onClick={onNextPageClick}\n                                className=\"focus:outline-none font-medium text-2xl\"\n                            >\n                                &rarr;\n                            </button>\n                        ) : (\n                            <div></div>\n                        )}\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/404.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/user/edit-profile.tsx",["107","108"],"import { gql, useApolloClient, useMutation } from '@apollo/client';\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useForm } from 'react-hook-form';\nimport { Button } from '../../components/button';\nimport { useMe } from '../../hooks/useMe';\nimport { editProfile, editProfileVariables } from '../../__generated__/editProfile';\n\nconst EDIT_PROFILE_MUTATION = gql`\n    mutation editProfile($input: EditProfileInput!){\n        editProfile(input: $input) {\n            ok\n            error\n        }\n    }\n`;\n\ninterface IFormProps {\n    email?: string;\n    password?: string;\n};\n\n\nexport const EditProfile = () => {\n    const { data: userData } = useMe();\n    const client = useApolloClient();\n    const onCompleted = (data: editProfile) => {\n        const {\n            editProfile: {ok},\n        } = data;\n        if(ok && userData){\n            const {\n                me: {email: prevEmail, id}\n            }= userData;\n            const { email: newEmail} = getValues();\n            if (prevEmail !== newEmail) {\n                client.writeFragment({\n                    id: `User:${id}`,\n                    fragment: gql`\n                        fragment EditedUser on User {\n                            verified\n                            email\n                        }\n                    `,\n                    data: {\n                        email: newEmail,\n                        verified: false\n                    },\n                });\n            }\n        }\n    };\n    const [editProfile, {loading}] = useMutation<\n        editProfile,\n        editProfileVariables\n        >(EDIT_PROFILE_MUTATION, {\n            onCompleted,\n        });\n    const { register, handleSubmit, getValues, formState} = useForm<IFormProps>({\n        mode: \"onChange\",\n        defaultValues: {\n            email: userData?.me.email,\n        },\n    });\n    const onSubmit = () => {\n        const { email, password } = getValues();\n        editProfile({\n            variables: {\n                input: {\n                    email,\n                    ...(password !== \"\" && { password }),\n                },\n            },\n        });\n    };\n    return (\n        <div className=\"mt-52 flex  flex-col justify-center items-center\">\n            <Helmet>\n                <title>\n                    Edit Profile | Uber Eats\n                </title>\n            </Helmet>\n            <h4 className=\"font-semibold text-2xl mb-3\">Edit Profile</h4>\n            <form onSubmit={handleSubmit(onSubmit)} className=\"grid max-w-screen-sm gap-3 mt-5 w-full mb-5\">\n                <input ref={register({\n                    pattern: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                })}\n                name=\"email\" \n                className=\"input\" \n                type=\"email\" \n                placeholder=\"Email\" \n                />\n                <input ref={register} className=\"input\" name=\"password\" type=\"password\" placeholder=\"Password\" />\n                <Button loading={loading} canClick={formState.isValid} actionText=\"Save Profile\" />\n            </form>\n        </div>\n    );\n};","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/user/confirm-email.tsx",["109"],"import { gql, useApolloClient, useMutation } from \"@apollo/client\"\nimport { useEffect } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useHistory } from \"react-router-dom\";\nimport { useMe } from \"../../hooks/useMe\";\nimport { verifyEmail, verifyEmailVariables } from \"../../__generated__/verifyEmail\";\n\nconst VERYFY_EMAIL_MUTATION = gql`\n    mutation verifyEmail($input: VerifyEmailInput!) {\n        verifyEmail(input: $input){\n            ok\n            error\n        }\n    }    \n`;\n\nexport const ConfirmEmail = () => {\n    const { data: userData} = useMe();\n    const client = useApolloClient();\n    const history = useHistory();\n    const onCompleted = (data: verifyEmail) => {\n        const {\n            verifyEmail: {ok},\n        } = data;\n        if(ok && userData?.me.id){\n            client.writeFragment({\n                id:`User:${userData.me.id}`,\n                fragment: gql`\n                    fragment VerifiedUser on User {\n                        verified\n                    }\n                `,\n                data: {\n                    verified: true,\n                },\n            });\n            history.push(\"/\");\n        }\n    };\n    const [verifyEmail] = useMutation<\n        verifyEmail,\n        verifyEmailVariables\n        >(VERYFY_EMAIL_MUTATION, {\n            onCompleted,\n        });\n    useEffect(()=> {\n        const [_, code] = window.location.href.split('code=');\n        verifyEmail({\n            variables: {\n                input: {\n                    code,\n                },\n            },\n        });\n    }, [verifyEmail]);\n    return (\n        <div className=\"mt-52 flex flex-col items-center justify-center\">\n            <Helmet>\n                <title>Verify Email | Uber Eats</title>\n            </Helmet>\n            <h2 className=\"text-lg mb-1 font-medium\">Confirming email</h2>\n            <h4 className=\"text-gray-700 text-sm\">\n                Please wait, don't close this page...\n            </h4>\n        </div>\n    );\n};","/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/client/search.tsx",["110","111"],"import { gql, useLazyQuery } from \"@apollo/client\";\nimport { useEffect } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { RESTAURANT_FRAGMENT } from \"../../fragments\";\nimport { searchRestaurant, searchRestaurantVariables } from \"../../__generated__/searchRestaurant\";\n\n\nconst SEARCH_RESTAURANT = gql`\n    query searchRestaurant($input: SearchRestaurantInput!) {\n        searchRestaurant(input: $input) {\n            ok\n            error\n            totalPages\n            totalResults\n            restaurants {\n                ...RestaurantParts\n            }\n        }\n    }\n    ${RESTAURANT_FRAGMENT}\n`;\n\nexport const Search = () => {\n    const location = useLocation();\n    const history = useHistory();\n    const [callQuery, { loading, data, called }] = useLazyQuery<\n        searchRestaurant,\n        searchRestaurantVariables\n    >(SEARCH_RESTAURANT);\n    useEffect(() => {\n        const [_, query ] = location.search.split(\"?term=\");\n        if(!query){\n            return history.replace(\"/\");\n        }\n        callQuery({\n            variables: {\n                input: {\n                    page: 1,\n                    query,\n                },\n            },\n        });\n    }, [history, location]);\n    console.log(loading, data, called);\n    return (\n        <div>\n            <Helmet>\n                <title>\n                    Search | Uber Eats\n                </title>\n            </Helmet>\n            <h1>Search Page</h1>\n        </div>\n    );\n};\n","/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/header.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/fragments.ts",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/button.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/restaurant.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/components/form-error.tsx",[],"/Users/jayden/Documents/GitHub/ubereats-frontend/src/pages/client/category.tsx",["112"],"import { gql, useQuery } from \"@apollo/client\"\nimport { useParams } from \"react-router-dom\";\nimport { CATEGORY_FRAGMENT, RESTAURANT_FRAGMENT } from \"../../fragments\"\nimport { category, categoryVariables } from \"../../__generated__/category\";\n\n\nconst CATEGORY_QUERY = gql`\n    query category($input: CategoryInput!) {\n        category(input: $input) {\n            ok\n            error\n            totalPages\n            totalResults\n            restaurants {\n                ...RestaurantParts\n            }\n            category {\n                ...CategoryParts\n            }\n        }\n    }\n    ${RESTAURANT_FRAGMENT}\n    ${CATEGORY_FRAGMENT}\n`;\n\ninterface ICategoryParams {\n    slug: string;\n}\n\nexport const Category = () => {\n    const params = useParams<ICategoryParams>();\n    const { data, loading } = useQuery<category, categoryVariables>(\n        CATEGORY_QUERY,\n        {\n          variables: {\n            input: {\n              page: 1,\n              slug: params.slug,\n            },\n          },\n        }\n      );\n      console.log(data);\n    return <h1>Category</h1>;\n}","/Users/jayden/Documents/GitHub/ubereats-frontend/src/__generated__/globalTypes.ts",[],{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","severity":1,"message":"118","line":2,"column":35,"nodeType":"119","messageId":"120","endLine":2,"endColumn":43},{"ruleId":"121","severity":1,"message":"122","line":82,"column":44,"nodeType":"123","messageId":"124","endLine":82,"endColumn":45,"suggestions":"125"},{"ruleId":"121","severity":1,"message":"122","line":82,"column":69,"nodeType":"123","messageId":"124","endLine":82,"endColumn":70,"suggestions":"126"},{"ruleId":"121","severity":1,"message":"122","line":81,"column":44,"nodeType":"123","messageId":"124","endLine":81,"endColumn":45,"suggestions":"127"},{"ruleId":"121","severity":1,"message":"122","line":81,"column":69,"nodeType":"123","messageId":"124","endLine":81,"endColumn":70,"suggestions":"128"},{"ruleId":"117","severity":1,"message":"129","line":2,"column":10,"nodeType":"119","messageId":"120","endLine":2,"endColumn":13},{"ruleId":"121","severity":1,"message":"122","line":86,"column":40,"nodeType":"123","messageId":"124","endLine":86,"endColumn":41,"suggestions":"130"},{"ruleId":"121","severity":1,"message":"122","line":86,"column":65,"nodeType":"123","messageId":"124","endLine":86,"endColumn":66,"suggestions":"131"},{"ruleId":"117","severity":1,"message":"132","line":47,"column":16,"nodeType":"119","messageId":"120","endLine":47,"endColumn":17},{"ruleId":"117","severity":1,"message":"132","line":32,"column":16,"nodeType":"119","messageId":"120","endLine":32,"endColumn":17},{"ruleId":"133","severity":1,"message":"134","line":44,"column":8,"nodeType":"135","endLine":44,"endColumn":27,"suggestions":"136"},{"ruleId":"117","severity":1,"message":"137","line":32,"column":19,"nodeType":"119","messageId":"120","endLine":32,"endColumn":26},"no-native-reassign",["138"],"no-negated-in-lhs",["139"],"@typescript-eslint/no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["140","141"],["142","143"],["144","145"],["146","147"],"'url' is defined but never used.",["148","149"],["150","151"],"'_' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'callQuery'. Either include it or remove the dependency array.","ArrayExpression",["152"],"'loading' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"messageId":"153","fix":"154","desc":"155"},{"messageId":"156","fix":"157","desc":"158"},{"messageId":"153","fix":"159","desc":"155"},{"messageId":"156","fix":"160","desc":"158"},{"messageId":"153","fix":"161","desc":"155"},{"messageId":"156","fix":"162","desc":"158"},{"messageId":"153","fix":"163","desc":"155"},{"messageId":"156","fix":"164","desc":"158"},{"messageId":"153","fix":"165","desc":"155"},{"messageId":"156","fix":"166","desc":"158"},{"messageId":"153","fix":"167","desc":"155"},{"messageId":"156","fix":"168","desc":"158"},{"desc":"169","fix":"170"},"removeEscape",{"range":"171","text":"172"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"173","text":"174"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"175","text":"172"},{"range":"176","text":"174"},{"range":"177","text":"172"},{"range":"178","text":"174"},{"range":"179","text":"172"},{"range":"180","text":"174"},{"range":"181","text":"172"},{"range":"182","text":"174"},{"range":"183","text":"172"},{"range":"184","text":"174"},"Update the dependencies array to be: [callQuery, history, location]",{"range":"185","text":"186"},[2721,2722],"",[2721,2721],"\\",[2746,2747],[2746,2746],[2556,2557],[2556,2556],[2581,2582],[2581,2581],[2648,2649],[2648,2648],[2673,2674],[2673,2673],[1270,1289],"[callQuery, history, location]"]